/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 *
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/rest/EntitydeltaResource.java.e.vm
 */
package com.incloud.hcp.rest.delta;

import com.incloud.hcp.bean.JSON;
import com.incloud.hcp.bean.custom.MensajeSap;
import com.incloud.hcp.bean.custom.MensajeSapMasivo;
import com.incloud.hcp.bean.custom.OperacionCertificado;
import com.incloud.hcp.common.BindingErrorsResponse;
import com.incloud.hcp.domain.*;
import com.incloud.hcp.domain.response.CerCertificadoResponse;
import com.incloud.hcp.repository.CerDocumentoAdjuntoRepository;
import com.incloud.hcp.repository.delta.CerCertificadoDeltaRepository;
import com.incloud.hcp.rest.CerCertificadoRest;
import com.incloud.hcp.service.dto.*;
import com.incloud.hcp.service.support.PageResponse;
import com.incloud.hcp.util.Utils;
import com.incloud.hcp.utils.DateUtils;
import io.swagger.annotations.ApiOperation;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.codehaus.jettison.json.JSONException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URISyntaxException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;

@RestController
@RequestMapping("/api/cerCertificado")
public class CerCertificadoDeltaRest extends CerCertificadoRest {

    private final Logger log = LoggerFactory.getLogger(CerCertificadoDeltaRest.class);

    @Autowired
    protected CerCertificadoDeltaRepository cerCertificadoDeltaRepository;

    @Autowired
    protected CerDocumentoAdjuntoRepository cerDocumentoAdjuntoDeltaRepository;

    @ApiOperation(value = "Elimina Certificado en forma lógica", produces = "application/json")
    @PostMapping(value = "/_eliminarCertificado", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<CerCertificado> eliminarCertificado(
            @RequestBody CerCertificadoEliminarEntradaDto bean) throws URISyntaxException {
        BindingErrorsResponse errors = new BindingErrorsResponse();
        HttpHeaders headers = new HttpHeaders();
        log.debug("Ingresando eliminarCertificado by:" + bean.toString());
        try {
            CerCertificado result = this.cerCertificadoDeltaService.eliminarCertificado(bean);
            return Optional.ofNullable(result).map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
                throw new RuntimeException(error);
            }
            headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    @ApiOperation(value = "Elimina Certificado en forma lógica", produces = "application/json")
    @PostMapping(value = "/uploadCertificado", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<MensajeSap>> uploadExcelCertificado(@RequestParam("file") MultipartFile file) {
        try {
            InputStream in = file.getInputStream();
            List<MensajeSap> result = this.cerCertificadoDeltaService.uploadExcelCertificado(in);

            return Optional.of(result).map(l -> new ResponseEntity<>(l, HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            throw new RuntimeException(e.getMessage());
        }
    }


    @ApiOperation(value = "Genera Reporte Pdf de ejemplo", produces = "application/pdf")
    @GetMapping(value = "/_generarReportePdf/{cerCertificadoId}", produces = { MediaType.APPLICATION_PDF_VALUE })
    public ResponseEntity<ByteArrayResource> generarReportePdf(@PathVariable Integer cerCertificadoId)  {
        try
        {
            ByteArrayResource byteArrayResource = this.cerCertificadoDeltaService.generarReportePdf(cerCertificadoId);

            HttpHeaders headers = new HttpHeaders();
            headers.add("Content-Disposition", "inline; filename=ReporteCertificado.pdf");
            return ResponseEntity
                    .ok()
                    .headers(headers)
                    .contentType(MediaType.APPLICATION_PDF)
                    .body(byteArrayResource);
        }
        catch (Exception e) {
            String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
            throw new RuntimeException(error);
        }
    }


    @ApiOperation(value = "Genera Excel XLSX de registros por Certificado", produces = "application/vnd.ms-excel")
    @GetMapping(value = "/_downloadExcelporFiltro/{nroCertificado}/{nroPedido}/{tipoPedido}/{ruc}/{razonSocial}/{mtrSociedadId}/{fechaCreacionDesde}/{fechaCreacionHasta}/{mtrEstadoId}/{mtrMonedaId}", produces = { MediaType.APPLICATION_OCTET_STREAM_VALUE })
    public ResponseEntity<?> downloadCompleteExcelSXLSX(
            @PathVariable String nroCertificado,
            @PathVariable String nroPedido,
            @PathVariable String tipoPedido,
            @PathVariable String ruc,
            @PathVariable String razonSocial,
            @PathVariable Integer mtrSociedadId,
            @PathVariable String fechaCreacionDesde,
            @PathVariable String fechaCreacionHasta,
            @PathVariable Integer mtrEstadoId,
            @PathVariable Integer mtrMonedaId,
            HttpServletResponse response) {

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd_hh_mm_ss");
        String nombreArchivo = this.setObtenerNombreArchivoExcel();
        String excelFileName = nombreArchivo + "_" + formatter.format(LocalDateTime.now()) + ".xlsx";

        try {
            CerCertificado cerCertificado = new CerCertificado();
            if  (StringUtils.isNotBlank(nroCertificado)) {
                cerCertificado.setCodigoCertificado(nroCertificado);
            }
            if  (StringUtils.isNotBlank(nroPedido) || StringUtils.isNotBlank(tipoPedido)) {
                CerNotaPedido cerNotaPedido = new CerNotaPedido();
                if  (StringUtils.isNotBlank(nroPedido)) {
                    cerNotaPedido.setCodigoNotaPedidoSap(nroPedido);
                }
                if  (StringUtils.isNotBlank(tipoPedido)) {
                    cerNotaPedido.setTipo(tipoPedido);
                }
                cerCertificado.setCerNotaPedido(cerNotaPedido);
            }
            if  (StringUtils.isNotBlank(ruc) || StringUtils.isNotBlank(razonSocial) ) {
                MtrProveedor mtrProveedor = new MtrProveedor();
                if  (StringUtils.isNotBlank(ruc)) {
                    mtrProveedor.setRuc(ruc);
                }
                if  (StringUtils.isNotBlank(razonSocial)) {
                    mtrProveedor.setRazonSocial(razonSocial);
                }

                cerCertificado.setMtrProveedor(mtrProveedor);
            }

            if  (mtrSociedadId != 0) {
                MtrSociedad mtrSociedad = new MtrSociedad();
                mtrSociedad.setId(mtrSociedadId);
                cerCertificado.setMtrSociedad(mtrSociedad);
            }
            if  (StringUtils.isNotBlank(fechaCreacionDesde)) {
                Date fecha = DateUtils.convertStringToDate("yyyyMMdd", fechaCreacionDesde);
                String sFecha = DateUtils.convertDateToString("dd/MM/yyyy", fecha);
                cerCertificado.setFechaCreacionDesde(sFecha);
            }
            if  (StringUtils.isNotBlank(fechaCreacionHasta)) {
                Date fecha = DateUtils.convertStringToDate("yyyyMMdd", fechaCreacionHasta);
                String sFecha = DateUtils.convertDateToString("dd/MM/yyyy", fecha);
                cerCertificado.setFechaCreacionHasta(sFecha);
            }
            if  (mtrEstadoId != 0) {
                MtrEstado mtrEstado = new MtrEstado();
                mtrEstado.setId(mtrEstadoId);
                cerCertificado.setMtrEstado(mtrEstado);
            }
            if  (mtrMonedaId != 0) {
                MtrMoneda mtrMoneda = new MtrMoneda();
                mtrMoneda.setId(mtrMonedaId);
                cerCertificado.setMtrMoneda(mtrMoneda);
            }


            SXSSFWorkbook book = this.cerCertificadoDeltaService.downloadExcelporFiltro(cerCertificado);
            ByteArrayOutputStream outByteStream;
            byte[] outArray;
            outByteStream = new ByteArrayOutputStream();
            book.write(outByteStream);
            outArray = outByteStream.toByteArray();
            response.setContentLength(outArray.length);
            response.setHeader("Expires:", "0"); // eliminates browser caching
            response.setHeader("Content-Disposition", "attachment; filename=" + excelFileName);
            OutputStream outStream = response.getOutputStream();
            outStream.write(outArray);

            book.dispose();
            book.close();

            outStream.flush();

        } catch (Exception e) {
            String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
            e.printStackTrace();
            throw new RuntimeException(error);
        }

        return new ResponseEntity<>(HttpStatus.OK);
    }


    @ApiOperation(value = "Genera Excel XLSX de registros por Certificado por Proveedor", produces = "application/vnd.ms-excel")
    @GetMapping(value = "/_downloadExcelProveedorporFiltro/{nroCertificado}/{nroPedido}/{tipoPedido}/{mtrSociedadId}/{fechaCreacionDesde}/{fechaCreacionHasta}/{mtrEstadoId}/{mtrMonedaId}", produces = { MediaType.APPLICATION_OCTET_STREAM_VALUE })
    public ResponseEntity<?> downloadCompleteExcelProveedorSXLSX(
            @PathVariable String nroCertificado,
            @PathVariable String nroPedido,
            @PathVariable String tipoPedido,
            @PathVariable Integer mtrSociedadId,
            @PathVariable String fechaCreacionDesde,
            @PathVariable String fechaCreacionHasta,
            @PathVariable Integer mtrEstadoId,
            @PathVariable Integer mtrMonedaId,
            HttpServletResponse response) {

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd_hh_mm_ss");
        String nombreArchivo = this.setObtenerNombreArchivoExcel();
        String excelFileName = nombreArchivo + "_" + formatter.format(LocalDateTime.now()) + ".xlsx";

        try {
            CerCertificado cerCertificado = new CerCertificado();
            if  (StringUtils.isNotBlank(nroCertificado)) {
                cerCertificado.setCodigoCertificado(nroCertificado);
            }
            if  (StringUtils.isNotBlank(nroPedido) || StringUtils.isNotBlank(tipoPedido)) {
                CerNotaPedido cerNotaPedido = new CerNotaPedido();
                if  (StringUtils.isNotBlank(nroPedido)) {
                    cerNotaPedido.setCodigoNotaPedidoSap(nroPedido);
                }
                if  (StringUtils.isNotBlank(tipoPedido)) {
                    cerNotaPedido.setTipo(tipoPedido);
                }
                cerCertificado.setCerNotaPedido(cerNotaPedido);
            }

            if  (mtrSociedadId != 0) {
                MtrSociedad mtrSociedad = new MtrSociedad();
                mtrSociedad.setId(mtrSociedadId);
                cerCertificado.setMtrSociedad(mtrSociedad);
            }
            if  (StringUtils.isNotBlank(fechaCreacionDesde)) {
                Date fecha = DateUtils.convertStringToDate("yyyyMMdd", fechaCreacionDesde);
                String sFecha = DateUtils.convertDateToString("dd/MM/yyyy", fecha);
                cerCertificado.setFechaCreacionDesde(sFecha);
            }
            if  (StringUtils.isNotBlank(fechaCreacionHasta)) {
                Date fecha = DateUtils.convertStringToDate("yyyyMMdd", fechaCreacionHasta);
                String sFecha = DateUtils.convertDateToString("dd/MM/yyyy", fecha);
                cerCertificado.setFechaCreacionHasta(sFecha);
            }
            if  (mtrEstadoId != 0) {
                MtrEstado mtrEstado = new MtrEstado();
                mtrEstado.setId(mtrEstadoId);
                cerCertificado.setMtrEstado(mtrEstado);
            }
            if  (mtrMonedaId != 0) {
                MtrMoneda mtrMoneda = new MtrMoneda();
                mtrMoneda.setId(mtrMonedaId);
                cerCertificado.setMtrMoneda(mtrMoneda);
            }

            SXSSFWorkbook book = this.cerCertificadoDeltaService.downloadExcelProveedorporFiltro(cerCertificado);
            ByteArrayOutputStream outByteStream;
            byte[] outArray;
            outByteStream = new ByteArrayOutputStream();
            book.write(outByteStream);
            outArray = outByteStream.toByteArray();
            response.setContentLength(outArray.length);
            response.setHeader("Expires:", "0"); // eliminates browser caching
            response.setHeader("Content-Disposition", "attachment; filename=" + excelFileName);
            OutputStream outStream = response.getOutputStream();
            outStream.write(outArray);

            book.dispose();
            book.close();

            outStream.flush();

        } catch (Exception e) {
            String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
            e.printStackTrace();
            throw new RuntimeException(error);
        }

        return new ResponseEntity<>(HttpStatus.OK);
    }

    @ApiOperation(value = "Devuelve lista de registros de tipo Certificado en base al Proveedor ingresados en forma Paginada", produces = "application/json")
    @PostMapping(value = "/_findCondicionProveedorPaginated", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<PageResponse<CerCertificado>> findCondicionProveedorPaginated(
            @RequestBody CerCertificadoResponse bean, BindingResult bindingResult) throws URISyntaxException {
        BindingErrorsResponse errors = new BindingErrorsResponse();
        HttpHeaders headers = new HttpHeaders();
        if (bindingResult.hasErrors()) {
            String errorDevuelve = this.devuelveErrorHeaders(bindingResult, errors);
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(errorDevuelve);
            }
            headers.add("errors", errorDevuelve);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
        if (!Optional.ofNullable(bean.getPageRequest()).isPresent()) {
            String errorDevuelve = "Debe ingresar Bean de Paginación (PageRequest)";
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(errorDevuelve);
            }
            headers.add("errors", errorDevuelve);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
        PageRequest pageRequest = bean.getPageRequest().toPageRequest();
        log.debug(this.NOMBRE_CLASE + " - Ingresando findCondicionPaginated by:" + bean.toString());
        try {
            PageResponse<CerCertificado> result = this.cerCertificadoDeltaService.findCondicionProveedorPaginated(bean, pageRequest);
            return Optional.ofNullable(result).map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
                throw new RuntimeException(error);
            }
            headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    @ApiOperation(value = "Listado Certificado with Json array {json[]}.", produces = "application/json")
    @RequestMapping(value = "/findCertificadoWithJson", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<List<CerCertificado>> findCertificadoWithJson(@RequestBody JSON json)
            throws Exception,
            JSONException {
        return Optional.of(new ResponseEntity<List<CerCertificado>>(
                cerCertificadoDeltaService.splitCertificados(json.getJson()),
                HttpStatus.OK)).
                orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
    }

    @ApiOperation(value = "Listado Criterio Certificado", produces = "application/json")
    @RequestMapping(value = "/listCriterioCertificado", method = RequestMethod.POST, headers = "Accept=application/json")
    ResponseEntity<List<CerCertificado>> listCriterioCertificado(@RequestBody CerCertificado certificado)
            throws Exception {
        return Optional.of(new ResponseEntity<List<CerCertificado>>(
                this.cerCertificadoDeltaService.find(certificado),
                HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
    }

    @ApiOperation(value = "Listado Certificado Proveedor", produces = "application/json")
    @RequestMapping(value = "/listCertificadoProveedor/{rucProveedor}", method = RequestMethod.POST, headers = "Accept=application/json")
    ResponseEntity<List<CertificadoProveedorDto>> listCertificadoProveedor(@PathVariable("rucProveedor") String rucProveedor)
            throws Exception {
        return Optional.of(new ResponseEntity<List<CertificadoProveedorDto>>(
                this.cerCertificadoDeltaService.listadoCertificadoByProveedor(rucProveedor),
                HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
    }

    @ApiOperation(value = "Listado Certificado Conglomerado", produces = "application/json")
    @RequestMapping(value = "/listCertificadoConglomerado/{idCertificado}", method = RequestMethod.POST, headers = "Accept=application/json")
    ResponseEntity<List<CertificadoConglomeradoDto>> listCertificadoConglomerado(@PathVariable("idCertificado") Integer idCertificado)
            throws Exception {
        return Optional.of(new ResponseEntity<List<CertificadoConglomeradoDto>>(
                this.cerCertificadoDeltaService.listadoCertificadoConglomerado(idCertificado),
                HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
    }

    @ApiOperation(value = "Guarda el Certificado más el array de ajuntos", produces = "application/json")
    @RequestMapping(value = "/saveAllCertificado", method = RequestMethod.POST, headers = "Accept=application/json")
    ResponseEntity<CertificadoCabezeraDetallesAdjuntosDto> saveAllCertificado(
            @RequestBody @Valid CertificadoCabezeraDetallesAdjuntosDto certificadoAdjuntos) {
        HttpHeaders headers = new HttpHeaders();
        try {
            CertificadoCabezeraDetallesAdjuntosDto result = cerCertificadoDeltaService.saveAllCertificado(
                    certificadoAdjuntos);
            log.debug("Agregar Certificado mas el array de ajuntos: {}", result);
            return Optional.of(result)
                    .map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
                throw new RuntimeException(error);
            }
            headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    @ApiOperation(value = "Aprobacion Firma B", produces = "application/json")
    @RequestMapping(value = "/aprobacionFirmaB", method = RequestMethod.POST, headers = "Accept=application/json")
    ResponseEntity<CerCertificadoAprobacionFirmaBDto> aprobacionFirmaB(
            @RequestBody CerCertificadoAprobacionFirmaBDto cerCertificadoAprobacionFirmaBDto) {
        HttpHeaders headers = new HttpHeaders();
        try {
            CerCertificadoAprobacionFirmaBDto result = cerCertificadoDeltaService.aprobacionFirmaB(
                    cerCertificadoAprobacionFirmaBDto);
            log.debug("aprobacionFirmaB {}", result);
            return Optional.of(result)
                    .map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
                throw new RuntimeException(error);
            }
            headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    @ApiOperation(value = "Update el Certificado más el array de ajuntos", produces = "application/json")
    @RequestMapping(value = "/updateAllCertificado", method = RequestMethod.POST, headers = "Accept=application/json")
    ResponseEntity<CertificadoCabezeraDetallesAdjuntosDto> updateAllCertificado(@RequestBody CertificadoCabezeraDetallesAdjuntosDto certificadoAdjuntos) throws Exception {
        CertificadoCabezeraDetallesAdjuntosDto result = cerCertificadoDeltaService.updateAllCertificado(
                certificadoAdjuntos);
        log.debug("Actualiza Certificado:{}", result);
        return ResponseEntity.ok().body(result);
    }

    @ApiOperation(value = "Elimina Documento", produces = "application/json")
    @RequestMapping(value = "/deleteDocumento/{idCertificado}", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<CerCertificado> deleteDocumento(@PathVariable("idCertificado") Integer idCertificado)
            throws Exception {
        return Optional.of(new ResponseEntity<CerCertificado>(
                this.cerCertificadoDeltaService.deleteDocumento(idCertificado),
                HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
    }


    @ApiOperation(value = "Elimina todos los elementos del Certificado", produces = "application/json")
    @RequestMapping(value = "/deleteAllCertificado/{idCertificado}", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<CerCertificado> deleteAllCertificado(@PathVariable("idCertificado") Integer idCertificado)
            throws Exception {
        return Optional.of(new ResponseEntity<CerCertificado>(
                this.cerCertificadoDeltaService.deleteAllCertificado(idCertificado),
                HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
    }


    @RequestMapping(value = "/certificado/adjuntos", method = RequestMethod.POST, produces = {
            MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})
    public ResponseEntity<?> certificadoAdjuntos(@RequestParam("file") MultipartFile file) throws Exception {
        log.debug("Agregrando adjuntos Respuesta Licitacion  [" + file.getName() + " , " +
                file.getSize() + " ]");
        return Optional.ofNullable(cerCertificadoDeltaService.agregarDocumentoCerificado(file))
                .map(oj -> {
                    Map response = new HashMap<>();
                    response.put("data", oj);
                    return response;
                })
                .map(response -> new ResponseEntity<>(response, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    @RequestMapping(value = "/certificado/adjuntosAprobador/{certificadoId}", method = RequestMethod.POST, produces = {
            MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})
    public ResponseEntity<?> adjuntosAprobador(
            @PathVariable("certificadoId") Integer certificadoId,
            @RequestParam("file") MultipartFile file
    ) throws Exception {
        log.debug("adjuntosAprobador: [" + file.getName() + " , " +
                file.getSize() + " ]");
        return Optional.ofNullable(cerCertificadoDeltaService.adjuntosAprobador(file, certificadoId))
                .map(oj -> {
                    Map response = new HashMap<>();
                    response.put("data", oj);
                    return response;
                })
                .map(response -> new ResponseEntity<>(response, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    @RequestMapping(value = "/certificado/listaAdjuntos/{CertificadoID}", method = RequestMethod.POST, produces = {
            MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})
    public ResponseEntity<?> listaAdjuntos(@PathVariable("CertificadoID") Integer CertificadoID) throws Exception {
        return Optional.of(new ResponseEntity<List<CerCertificado>>(
                this.cerCertificadoDeltaService.listaAdjuntos(CertificadoID),
                HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
    }

    @ApiOperation(value = "Modifica el Estado del Certificado", produces = "application/json")
    @RequestMapping(value = "/actualizaEstado", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<CerCertificado> actualizarEstado(@RequestBody EstadoCertificadoDto estadoDto,
                                                           BindingResult bindingResult) throws Exception {
        BindingErrorsResponse errors = new BindingErrorsResponse();
        HttpHeaders headers = new HttpHeaders();
        if (bindingResult.hasErrors()) {
            log.error("Ingresando actualizar Estado Certificado: " + estadoDto);
            errors.addAllErrors(bindingResult);
            throw new RuntimeException(errors.toJSON());
        }
        CerCertificado result = this.cerCertificadoDeltaRepository.save(
                this.cerCertificadoDeltaService.actualizarEstadoCertificado(estadoDto));
        log.debug("Cambiando Estado Nota de Certificado : {}", result);
        return ResponseEntity.ok().body(result);
    }

    @ApiOperation(value = "Operacion de aprobacion o rechazo de certificados", produces = "application/json")
    @RequestMapping(value = "/realizarOperacion", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<List<MensajeSap>> realizarOperacion(@RequestBody OperacionCertificado operacion) throws Exception{
        log.debug("Rest operacion certificado Inicio : {}");
        List<MensajeSap> msg = this.cerCertificadoDeltaService.realizarOperacion(operacion);
        return Optional.of(msg)
                .map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
    }

    @ApiOperation(value = "Operacion de aprobacion o rechazo de certificados", produces = "application/json")
    @RequestMapping(value = "/realizarOperacionMasivo", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<List<MensajeSapMasivo>> realizarOperacionMasivo(@RequestBody List<OperacionCertificado> listaOperacion) throws Exception{
        log.debug("Rest operacion certificado Inicio : {}");
        List<MensajeSapMasivo> lista = new ArrayList<MensajeSapMasivo>();
        for(OperacionCertificado operacion: listaOperacion) {
            CerCertificado certificado = this.cerCertificadoDeltaRepository.getOne(operacion.getIdCertificado());
            List<MensajeSap> listaMensaje = this.cerCertificadoDeltaService.ejecutarWorkflow(operacion);
            MensajeSapMasivo msgMasivo = new MensajeSapMasivo(certificado.getCodigoCertificado(),listaMensaje);
            lista.add(msgMasivo);
        }

        return Optional.of(lista)
                .map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
    }

    @ApiOperation(value = "Delete all Certificado from CMIS", produces = "application/json")
    @RequestMapping(value = "/certificado/deleteAllFilesCMIS",
            method = RequestMethod.POST, produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})
    public ResponseEntity<?> deleteAllFilesCMIS(@RequestBody CerDeleteAllFilesDto cerDeleteAllFilesDto) throws Exception{
        return Optional.of(new ResponseEntity<List<CerCertificado>>(
                this.cerCertificadoDeltaService.deleteAllFilesCMIS(cerDeleteAllFilesDto),
                HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
    }

    @RequestMapping(value = "/certificado/deleteOneFile/{fileID}", method = RequestMethod.POST, produces = {
            MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})
    public ResponseEntity<?> listaAdjuntos(@PathVariable("fileID") String fileID) throws Exception{
        return Optional.of(new ResponseEntity<List<String>>(
                this.cerCertificadoDeltaService.deleteOneFile(fileID),
                HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
    }

}
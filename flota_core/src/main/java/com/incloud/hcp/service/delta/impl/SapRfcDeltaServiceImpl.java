/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 *
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntitydeltaDTOService.java.e.vm
 */
package com.incloud.hcp.service.delta.impl;

import com.incloud.hcp.bean.custom.*;
import com.incloud.hcp.domain.*;
import com.incloud.hcp.mapper.*;
import com.incloud.hcp.repository.delta.*;
import com.incloud.hcp.service.delta.SapRfcDeltaService;
import com.incloud.hcp.service.impl.SapRfcServiceImpl;
import com.incloud.hcp.service.notificacion.CertificadoNotificacion;
import com.incloud.hcp.service.notificacion.MailSetting;
import com.incloud.hcp.util.Utils;
import com.sap.conn.jco.*;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * A simple DTO Facility for AppParametria.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public class SapRfcDeltaServiceImpl extends SapRfcServiceImpl implements SapRfcDeltaService {
    private final Logger logger = LoggerFactory.getLogger(this.getClass());
    private final Logger log = LoggerFactory.getLogger(SapRfcDeltaServiceImpl.class);
    @Autowired
    private MtrClaseDocumentoDeltaRepository mtrClaseDocumentoDeltaRepository;

    @Autowired
    private MtrCentroAlmacenDeltaRepository mtrCentroAlmacenDeltaRepository;

    @Autowired
    private MtrUnidadMedidaDeltaRepository mtrUnidadMedidaDeltaRepository;

    @Autowired
    private MtrGrupoArticuloDeltaRepository mtrGrupoArticuloDeltaRepository;

    @Autowired
    private MtrGrupoArticuloMapper mtrGrupoArticuloMapper;

    @Autowired
    private MtrUnidadMedidaMapper mtrUnidadMedidaMapper;

    @Autowired
    private MtrBienServicioMapper mtrBienServicioMapper;

    @Autowired
    private MtrBienServicioDeltaRepository mtrBienServicioDeltaRepository;

    @Autowired
    private MtrProveedorDeltaRepository mtrProveedorDeltaRepository;

    @Autowired
    private MtrCondicionPagoDeltaRepository mtrCondicionPagoDeltaRepository;

    @Autowired
    private MtrEstadoDeltaRepository mtrEstadoDeltaRepository;

    @Autowired
    private MtrMonedaDeltaRepository mtrMonedaDeltaRepository;

    @Autowired
    private MtrOrgCompraDeltaRepository mtrOrgCompraDeltaRepository;

    @Autowired
    private MtrCuentaMayorDeltaRepository mtrCuentaMayorDeltaRepository;

    @Autowired
    private MtrSociedadDeltaRepository mtrSociedadDeltaRepository;

    @Autowired
    private CerNotaPedidoDeltaRepository cerNotaPedidoDeltaRepository;

    @Autowired
    private CerCertificadoFirmaDeltaRepository cerCertificadoFirmaDeltaRepository;

    @Autowired
    private CerNotaPedidoDetalleDeltaRepository cerNotaPedidoDetalleDeltaRepository;

    @Autowired
    private CerFirmaDeltaRepository cerFirmaDeltaRepository;

    @Autowired
    private MtrTipoFirmaDeltaRepository mtrTipoFirmaDeltaRepository;

    @Autowired
    private MtrAprobadorDeltaRepository mtrAprobadorDeltaRepository;

    @Autowired
    private AppParametriaDeltaRepository appParametriaDeltaRepository;

    @Autowired
    private MtrCuentaImputacionDeltaRepository mtrCuentaImputacionDeltaRepository;

    @Autowired
    private MtrTipoImputacionDeltaRepository mtrTipoImputacionDeltaRepository;

    @Autowired
    protected CertificadoNotificacion certificadoNotificacion;

    @Autowired
    private CerNotaPedidoMapper cerNotaPedidoMapper;

    @Autowired
    private MtrClaseDocumentoMapper mtrClaseDocumentoMapper;

    @Autowired
    private MtrEstadoMapper mtrEstadoMapper;

    @Autowired
    private MtrMonedaMapper mtrMonedaMapper;

    @Autowired
    private MtrProveedorMapper mtrProveedorMapper;

    @Autowired
    private MtrSociedadMapper mtrSociedadMapper;

    //SMTP Values
    @Value("${spring.mail.username}")
    private String username;
    @Value("${spring.mail.password}")
    private String password;
    @Value("${spring.mail.host}")
    private String host;
    @Value("${spring.mail.port}")
    private String port;

    @Override
    public MensajeSap integrarNotaPedido(List<RangeSap> rangeDoc, List<RangeSap> rangeFecha) {

        List<DescargaServicioSap> lista = new ArrayList<DescargaServicioSap>();
        DescargaServicioSap descarga = new DescargaServicioSap();
        List<MensajeSap> listaMensaje = new ArrayList<MensajeSap>();
        MensajeSap msg = new MensajeSap("S", "", "La nota de pedido se actualiz√≥ correctamente");
        //this.mtrSociedadMapper.findAllByCodesSap("'dfdf'").get(0).getDescBrv()
        //Listas de dependencias
        List<MtrProveedor> listaProveedor = this.mtrProveedorDeltaRepository.findAll();
        List<MtrCondicionPago> listaCondicion = this.mtrCondicionPagoDeltaRepository.findAll();
        List<MtrEstado> listaEstado = this.mtrEstadoDeltaRepository.findAll();
        List<MtrMoneda> listaMoneda = this.mtrMonedaDeltaRepository.findAll();
        List<MtrOrgCompra> listaOrgCompra = this.mtrOrgCompraDeltaRepository.findAll();
        List<MtrSociedad> listaSociedad = this.mtrSociedadDeltaRepository.findAll();
        List<MtrClaseDocumento> listaDoc = this.mtrClaseDocumentoDeltaRepository.findAll();

        //Lista de cabecera detalle
        List<CerNotaPedido> listaOrden = this.cerNotaPedidoDeltaRepository.findAll();
        List<CerNotaPedidoDetalle> listaDetalle = this.cerNotaPedidoDetalleDeltaRepository.findAll();
        List<CerFirma> listaCerFirma = this.cerFirmaDeltaRepository.findAll();
        List<MtrTipoFirma> listaTipoFirma = this.mtrTipoFirmaDeltaRepository.findAll();
        List<MtrAprobador> listaAprobador = this.mtrAprobadorDeltaRepository.findAll();
        List<AppParametria> listaParametria = this.appParametriaDeltaRepository.findAll();

        //Formato de fechas de entrada y de salida
        java.text.SimpleDateFormat formatIn = new java.text.SimpleDateFormat("yyyy/MM/dd");
        java.text.SimpleDateFormat formatSap = new java.text.SimpleDateFormat("yyyyMMdd");

        //Obtener parametro de estado inicial para notas de pedido provenientes de SAP
        String codEstadoInicial = "NPCE";
        Optional<AppParametria> optionalParametroEstado = listaParametria.stream()
                .filter(x -> "IPROVIDER".equalsIgnoreCase(x.getModulo())
                        && "Estado Inicial Posicion".equalsIgnoreCase(x.getLabel()))
                .findFirst();
        if (optionalParametroEstado.isPresent())
            codEstadoInicial = optionalParametroEstado.get().getValue1();

        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_DESCARGA_DOC_COMPRA");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            JCoTable tableImportDocCompra = imports.getTable("TI_EBELN");
            JCoTable tableImportFechaPedido = imports.getTable("TI_BEDAT");
            //Poblamos Rango documento de compras
            if (rangeDoc != null && rangeDoc.size() > 0) {
                for (RangeSap ele : rangeDoc) {
                    tableImportDocCompra.appendRow();
                    tableImportDocCompra.setValue("SIGN", ele.getSign());
                    tableImportDocCompra.setValue("OPTION", ele.getOption());
                    tableImportDocCompra.setValue("LOW", ele.getLow());
                    tableImportDocCompra.setValue("HIGH", ele.getHigh());
                }
            }
            //Poblamos Rango fecha de pedidos
            if (rangeFecha != null && rangeFecha.size() > 0) {
                for (RangeSap ele : rangeFecha) {
                    tableImportFechaPedido.appendRow();
                    tableImportFechaPedido.setValue("SIGN", ele.getSign());
                    tableImportFechaPedido.setValue("OPTION", ele.getOption());


                    java.util.Date utilDInicio = formatIn.parse(ele.getLow());
                    java.util.Date utilDFin = formatIn.parse(ele.getHigh());

                    tableImportFechaPedido.setValue("LOW", utilDInicio);
                    tableImportFechaPedido.setValue("HIGH", utilDFin);
                }
            }
            imports.setValue("TI_EXIT", "X");
            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableGeneral = exports.getTable("TO_DESC_SERV");
            JCoTable tableCabecera = exports.getTable("TO_TCAB");
            JCoTable tablePosicion = exports.getTable("TO_TPOS");
            JCoTable tableServicio = exports.getTable("TO_TSERV");
            JCoTable tableTexto = exports.getTable("TO_TEXT_CAB");


            List<CerNotaPedido> listaEntity = new ArrayList<CerNotaPedido>();
            //Recuperar datos de pedidos

            for (int i = 0; i < tableCabecera.getNumRows(); i++) {

                //DescargaServicioSap des = new DescargaServicioSap();
                tableCabecera.setRow(i);

                //Setear Valores a la tabla
                CerNotaPedido pedido = new CerNotaPedido();

                Optional<CerNotaPedido> optionalPedido = listaOrden.stream()
                        .filter(x -> tableCabecera.getString("EBELN").equalsIgnoreCase(x.getCodigoNotaPedidoSap()))
                        .findFirst();
                if (optionalPedido.isPresent())
                    pedido = optionalPedido.get();

                Optional<MtrProveedor> optionalProveedor = listaProveedor.stream()
                        .filter(x -> tableCabecera.getString("LIFNR").equalsIgnoreCase(x.getLifnr()))
                        .findFirst();

                logger.error("========================= orden compra cabecera" + tableCabecera.getString("EBELN") + "=============================================");
                if (optionalProveedor.isPresent()) {
                    logger.error("Proveedor ok");
                    //log.error("Proveedor ok");
                    Optional<MtrCondicionPago> optionalCondicion = listaCondicion.stream()
                            .filter(x -> tableCabecera.getString("ZTERM").equalsIgnoreCase(x.getCodigoCondicionPagoSap()))
                            .findFirst();
                    if (optionalCondicion.isPresent()) {
                        logger.error("condicion pago ok");
                        //log.error("condicion pago ok");
                        // String finalEstadoInicial = estadoInicial;
                        //String finalCodEstadoFinal = codEstadoFinal;
                        String finalCodEstadoInicial = codEstadoInicial;
                        Optional<MtrEstado> optionalEstado = listaEstado.stream()
                                .filter(x -> finalCodEstadoInicial.equalsIgnoreCase(x.getCodigoEstado()))
                                .findFirst();
                        if (optionalEstado.isPresent()) {
                            logger.error("Estado ok");
                            //log.error("Estado ok");

                            Optional<MtrMoneda> optionalMoneda = listaMoneda.stream()
                                    .filter(x -> tableCabecera.getString("WAERS").equalsIgnoreCase(x.getDescBrv()))
                                    .findFirst();
                            if (optionalMoneda.isPresent()) {
                                logger.error("Moneda ok");
                                //log.error("Moneda ok");
                                Optional<MtrOrgCompra> optionalOrg = listaOrgCompra.stream()
                                        .filter(x -> tableCabecera.getString("EKORG").equalsIgnoreCase(x.getCodigoOrgCompraSap()))
                                        .findFirst();
                                if (optionalOrg.isPresent()) {
                                    logger.error("Organizacion ok");
                                    //log.error("Organizacion ok");
                                    /*Optional<MtrCentroAlmacen> optionalCentro = listaCentro.stream()
                                            .filter(x -> descargaDoc.getWerks().equalsIgnoreCase(x.getCodigoCentroSap()))
                                            .findFirst();
                                    if(optionalCentro.isPresent()) {

                                    }*/
                                    Optional<MtrSociedad> optionalSociedad = listaSociedad.stream()
                                            .filter(x -> tableCabecera.getString("BUKRS").equalsIgnoreCase(x.getDescBrv()))
                                            .findFirst();
                                    if (optionalSociedad.isPresent()) {
                                        logger.error("Sociedad ok");
                                        //log.error("Sociedad ok");
                                        Optional<MtrClaseDocumento> optionalClase = listaDoc.stream()
                                                .filter(x -> tableCabecera.getString("CLDOC").equalsIgnoreCase(x.getCodigoSap()))
                                                .findFirst();
                                        if (optionalClase.isPresent()) {
                                            logger.error("Clase doc ok");
                                            //log.error("Clase doc ok");
                                            pedido.setMtrProveedor(optionalProveedor.get());
                                            pedido.setMtrCondicionPago(optionalCondicion.get());
                                            pedido.setMtrEstado(optionalEstado.get());
                                            pedido.setMtrMoneda(optionalMoneda.get());
                                            pedido.setMtrOrgCompra(optionalOrg.get());
                                            pedido.setMtrSociedad(optionalSociedad.get());
                                            pedido.setMtrClaseDocumento(optionalClase.get());

                                            /*if() {

                                            }*/

                                            pedido.setCodigoNotaPedidoSap(tableCabecera.getString("EBELN"));

                                            pedido.setUserCompra(tableCabecera.getString("ERNAM"));
                                            pedido.setEmailUserCompra(tableCabecera.getString("SMTP_ADDR"));
                                            pedido.setTipo(tableCabecera.getString("TIPO"));
                                            pedido.setMonto(new BigDecimal("0.00"));
                                            if (!StringUtils.isBlank(tableCabecera.getString("VALOR_AJUSTADO"))) {
                                                if (!tableCabecera.getString("VALOR_AJUSTADO").trim().equalsIgnoreCase("n/a")) {
                                                    pedido.setMonto(new BigDecimal(tableCabecera.getString("VALOR_AJUSTADO").trim()));
                                                }
                                            }
                                            if (!StringUtils.isBlank(tableCabecera.getString("ZPLAZO"))) {
                                                pedido.setPlazo(Integer.parseInt(tableCabecera.getString("ZPLAZO").trim()));
                                            }
                                            if (!StringUtils.isBlank(tableCabecera.getString("ZKDATE"))
                                                    && !tableCabecera.getString("ZKDATE").equalsIgnoreCase("00000000")) {
                                                pedido.setFechaFinVigencia(formatSap.parse(tableCabecera.getString("ZKDATE").trim()));
                                            }
                                            pedido.setNombreCompletoCompra(tableCabecera.getString("NAME_TEXT"));


                                            if (!StringUtils.isBlank(tableCabecera.getString("BEDAT")) && !tableCabecera.getString("BEDAT").equalsIgnoreCase("00000000"))
                                                pedido.setFechaDocumento(formatSap.parse(tableCabecera.getString("BEDAT").trim()));
                                            if (!StringUtils.isBlank(tableCabecera.getString("VIGDES")) && !tableCabecera.getString("VIGDES").equalsIgnoreCase("00000000"))
                                                pedido.setFechaInicio(formatSap.parse(tableCabecera.getString("VIGDES").trim()));
                                            if (!StringUtils.isBlank(tableCabecera.getString("VIGHAS")) && !tableCabecera.getString("VIGHAS").equalsIgnoreCase("00000000"))
                                                pedido.setFechaFin(formatSap.parse(tableCabecera.getString("VIGHAS").trim()));
                                            //Inicio  texto grandes
                                            String tnotasAclaratorias = "";
                                            String tlugarPago = "";
                                            String tformaPago = "";
                                            String tdocParticulares = "";
                                            String tconcepto = "";
                                            String breakLine = System.lineSeparator();
                                            for(int z =  0 ; z < tableTexto.getNumRows();z++) {
                                                //tconcepto
                                                tableTexto.setRow(z);
                                                if (tableCabecera.getString("EBELN").equalsIgnoreCase(tableTexto.getString("PO_NUMBER"))) {
                                                    //tconcepto
                                                    if (tableTexto.getString("ID").equalsIgnoreCase("F01") || tableTexto.getString("ID").equalsIgnoreCase("K01")) {
                                                        tconcepto = tconcepto + tableTexto.getString("TDLINE");
                                                        tconcepto = tconcepto + breakLine;
                                                    }
                                                    //Notas aclaratorias

                                                    if (tableTexto.getString("ID").equalsIgnoreCase("F02") || tableTexto.getString("ID").equalsIgnoreCase("K08")) {
                                                        tnotasAclaratorias = tnotasAclaratorias + tableTexto.getString("TDLINE");
                                                        tnotasAclaratorias = tnotasAclaratorias + breakLine;
                                                    }

                                                    //Lugar y forma de entrega

                                                    if (tableTexto.getString("ID").equalsIgnoreCase("F05") || tableTexto.getString("ID").equalsIgnoreCase("K05")) {
                                                        tlugarPago = tlugarPago + tableTexto.getString("TDLINE");
                                                        tlugarPago = tlugarPago + breakLine;
                                                    }

                                                    //Forma de pago

                                                    if (tableTexto.getString("ID").equalsIgnoreCase("F07") || tableTexto.getString("ID").equalsIgnoreCase("K07")) {
                                                        tformaPago = tformaPago + tableTexto.getString("TDLINE");
                                                        tformaPago = tformaPago + breakLine;
                                                    }

                                                    //Documentos de aplicacion

                                                    if (tableTexto.getString("ID").equalsIgnoreCase("F20")) {
                                                        tdocParticulares = tdocParticulares + tableTexto.getString("TDLINE");
                                                        tdocParticulares = tdocParticulares + breakLine;
                                                    }



                                                }


                                            }
                                            pedido.setTconcepto(tconcepto.trim());
                                            pedido.setTdocParticulares(tdocParticulares.trim());
                                            pedido.setTlugarPago(tlugarPago.trim());
                                            pedido.setTformaPago(tformaPago.trim());
                                            pedido.setTnotasAclaratorias(tnotasAclaratorias.trim());
                                            pedido.setConcepto(tconcepto.trim());
                                            //Fin texto grande

                                            CerNotaPedido pedidoOut = this.cerNotaPedidoDeltaRepository.save(pedido);
                                            //Inicio eliminar y/o Actualizar Firmas - en Cascada
                                            List<CerFirma> filteredList = listaCerFirma.stream()
                                                    .filter(fm ->
                                                            fm.getCerNotaPedido().getCodigoNotaPedidoSap().equalsIgnoreCase(pedidoOut.getCodigoNotaPedidoSap()))
                                                    .collect(Collectors.toList());

                                            if(filteredList != null && filteredList.size() > 0) {
                                                for (CerFirma ele: filteredList) {
                                                    //System.out.println("" + ele.getId());
                                                    this.cerCertificadoFirmaDeltaRepository.deleteByFirmaId(ele.getId());
                                                }

                                            }
                                            this.cerFirmaDeltaRepository.deleteByEbeln(pedidoOut.getCodigoNotaPedidoSap());
                                            //Inicio eliminar y/o Actualizar Firmas

                                            if (!StringUtils.isBlank(tableCabecera.getString("FIRMAA1"))) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FA".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> tableCabecera.getString("FIRMAA1").trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {
                                                        /*Optional<CerFirma> optionalCerFirma = listaCerFirma.stream()
                                                                .filter(x -> optionalTipoFirma.get().getId() == x.getMtrTipoFirma().getId() &&
                                                                        pedidoOut.getId() == x.getCerNotaPedido().getId() &&
                                                                        descargaDoc.getFirmaa1().trim().equalsIgnoreCase(x.getMtrAprobador().getAprobadorSap()))
                                                                .findFirst();*/
                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(tableCabecera.getString("EBELN"));
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    }


                                                }

                                            }

                                            if (!StringUtils.isBlank(tableCabecera.getString("FIRMAA2"))) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FA".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> tableCabecera.getString("FIRMAA2").trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(tableCabecera.getString("EBELN"));
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    }


                                                }

                                            }

                                            if (!StringUtils.isBlank(tableCabecera.getString("FIRMAA3"))) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FA".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> tableCabecera.getString("FIRMAA3").trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(tableCabecera.getString("EBELN"));
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    }


                                                }

                                            }
                                            if (!StringUtils.isBlank(tableCabecera.getString("FIRMAA4"))) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FA".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> tableCabecera.getString("FIRMAA4").trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(tableCabecera.getString("EBELN"));
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    }


                                                }

                                            }
                                            //Firma b
                                            if (!StringUtils.isBlank(tableCabecera.getString("FIRMAB1"))) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FB".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> tableCabecera.getString("FIRMAB1").trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(tableCabecera.getString("EBELN"));
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    }


                                                }

                                            }
                                            if (!StringUtils.isBlank(tableCabecera.getString("FIRMAB2"))) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FB".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> tableCabecera.getString("FIRMAB2").trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(tableCabecera.getString("EBELN"));
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    }


                                                }

                                            }
                                            if (!StringUtils.isBlank(tableCabecera.getString("FIRMAB3"))) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FB".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> tableCabecera.getString("FIRMAB3").trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(tableCabecera.getString("EBELN"));
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    }


                                                }

                                            }

                                            if (!StringUtils.isBlank(tableCabecera.getString("FIRMAB4"))) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FB".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> tableCabecera.getString("FIRMAB4").trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(tableCabecera.getString("EBELN"));
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    }


                                                }

                                            }

                                            /*if (i < 100)
                                                lista.add(descargaDoc);*/

                                            //listaEntity.add(pedido);
                                            log.error("Pedido_generado pedidoOut ::: " + pedidoOut);;
                                            this.guardarPosicionServicio(pedidoOut, tablePosicion, tableServicio);
                                            //Enviar correo AL PROVEEDOR Y COMPRADOR
                                            log.error("Pedido_generado pedidoOut_3 ::: ");;
                                            if(pedidoOut != null) {
                                                MailSetting setting = new MailSetting();
                                                setting.setEmailFrom(username);
                                                setting.setPassword(password);
                                                setting.setHost(host);
                                                setting.setNameFrom(username);
                                                setting.setPort(port);
                                                setting.setUser(username);
                                                String emailDestinatarios = pedidoOut.getMtrProveedor().getEmailContacto() + "," + pedidoOut.getEmailUserCompra();
                                                String nroPedido = pedidoOut.getCodigoNotaPedidoSap();
                                                String nombreProveedor = pedidoOut.getMtrProveedor().getRazonSocial();
                                                log.error("enviar correo liberacion inicio ::: ");
                                                try {
                                                    this.certificadoNotificacion.enviarMailLiberacion(setting,nroPedido,nombreProveedor,emailDestinatarios);
                                                }catch(Exception e) {
                                                    log.error("Exception envio email liberacion ::: " + e.toString());
                                                }
                                                log.error("enviar correo liberacion fin ::: ");
                                            }

                                        }
                                    }

                                }
                            }
                        }
                    }

                }


            }
            //this.cerNotaPedidoDeltaRepository.saveAll(listaEntity);

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
            msg = new MensajeSap("E", "", error);
            // lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
            msg = new MensajeSap("E", "", error);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        }  catch (ParseException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
            msg = new MensajeSap("E", "", error);
        }


        return msg;
    }
     public void guardarPosicionServicio(CerNotaPedido pedido, JCoTable tablePosicion, JCoTable tableServicio  ) {

         List<DescargaServicioSap> lista = new ArrayList<DescargaServicioSap>();
         DescargaServicioSap descarga = new DescargaServicioSap();
         //Lista de cabecera detalle
         List<CerNotaPedido> listaOrden = this.cerNotaPedidoDeltaRepository.findAll();
         List<CerNotaPedidoDetalle> listaDetalle = this.cerNotaPedidoDetalleDeltaRepository.findAll();
         List<MtrCentroAlmacen> listaCentro = this.mtrCentroAlmacenDeltaRepository.findAll();
         List<MtrBienServicio> listaBienServicio = this.mtrBienServicioDeltaRepository.findAll();
         List<MtrCuentaImputacion> listaCuentaImputacion = this.mtrCuentaImputacionDeltaRepository.findAll();
         List<MtrCuentaMayor> listaCuentaMayor = this.mtrCuentaMayorDeltaRepository.findAll();


         java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyy/MM/dd");
         java.text.SimpleDateFormat formatOut = new java.text.SimpleDateFormat("yyyyMMdd");
         List<DescargaServicioSap> listaServicio = new ArrayList<DescargaServicioSap>();
         try {


             for (int i = 0; i < tableServicio.getNumRows(); i++) {

                 tableServicio.setRow(i);
                 DescargaServicioSap bs = new DescargaServicioSap();
                 bs.setEbeln(tableServicio.getString("EBELN"));
                 bs.setEbelp(tableServicio.getString("EBELP"));
                 bs.setExtrow(tableServicio.getString("EXTROW"));
                 bs.setIntrow(tableServicio.getString("INTROW"));
                 bs.setCodBienServicio(tableServicio.getString("SRVPOS"));
                 logger.error(" valor cod servicio :: " + tableServicio.getString("SRVPOS"));
                 bs.setTipo("S");
                 bs.setCanreq(tableServicio.getString("CANREQ"));
                 bs.setCanent(tableServicio.getString("CANENT"));
                 bs.setPrecio(tableServicio.getString("PRECIO"));
                 bs.setTextoAdicional(tableServicio.getString("DESCRI"));
                 bs.setUnimed(tableServicio.getString("UNIMED"));

                 bs.setKnttp(tableServicio.getString("KNTTP"));
                 bs.setKostl(tableServicio.getString("KOSTL"));
                 bs.setPosid(tableServicio.getString("POSID"));
                 bs.setAufnr(tableServicio.getString("AUFNR"));
                 bs.setSakto(tableServicio.getString("SAKTO"));
                 //bs.setWerks(tableServ.getString("WERKS"));
                 bs.setBurks(tableServicio.getString("BUKRS"));
                 // listaBienServioAuxiliar
                 //Fin

                 listaServicio.add(bs);

             }


             List<CerNotaPedidoDetalle> listaEntity = new ArrayList<CerNotaPedidoDetalle>();
             //Recuperar descarga
             for (int i = 0; i < tablePosicion.getNumRows(); i++) {

                 //tableExportDescargaServicio.setRow(i);
                 tablePosicion.setRow(i);


                 //Setear Valores a la tabla
                 logger.error("============================= orden compra detalle" + tablePosicion.getString("EBELP") + "===================================");


                 if (pedido != null) {
                     //CerNotaPedido pedido = optionalPedido.get();
                     logger.error("Existe pedido:: " + pedido.getCodigoNotaPedidoSap());
                     Optional<CerNotaPedidoDetalle> optionalDetalle = listaDetalle.stream()
                             .filter(x -> tablePosicion.getString("EBELN").equalsIgnoreCase(x.getEbeln()) && tablePosicion.getString("EBELP").equalsIgnoreCase(x.getPosicionSap())
                                     && "0000000000".equalsIgnoreCase(x.getExtrow()))
                             .findFirst();
                     CerNotaPedidoDetalle detalle = new CerNotaPedidoDetalle();
                     if (optionalDetalle.isPresent())
                         detalle = optionalDetalle.get();
                     Optional<MtrCentroAlmacen> optionalCentro = listaCentro.stream()
                             .filter(x -> tablePosicion.getString("WERKS").equalsIgnoreCase(x.getCodigoCentroSap()) && x.getIdPadre() == 0)
                             .findFirst();
                     if (optionalCentro.isPresent()) {
                         logger.error("Existe centro:: " + optionalCentro.get().getCodigoCentroSap());


                         detalle.setCerNotaPedido(pedido);
                         detalle.setExtrow("0000000000");
                         detalle.setIntrow("0000000000");
                         detalle.setMtrCentro(optionalCentro.get());
                         detalle.setPosicionSap(tablePosicion.getString("EBELP"));
                         detalle.setEbeln(tablePosicion.getString("EBELN"));
                         if(!StringUtils.isBlank(tablePosicion.getString("UNIMED"))) {
                             MtrUnidadMedida unidad = this.mtrUnidadMedidaDeltaRepository.findByCodigoSap(tablePosicion.getString("UNIMED"));
                             if(unidad != null)
                                 detalle.setMtrUnidadMedida(unidad);
                         }
                         //detalle.setUnidadTextoItem(tablePosicion.getString("UNIMED"));

                         //detalle.setCuentaMayor(tablePos.getString("SAKTO"));
                         //detalle.setCeco(tablePos.getString("KOSTL"));
                         //detalle.setAfe(tablePos.getString("POSID"));
                         //detalle.setOrden(tablePos.getString("AUFNR")	);

                         //detalle.setIdPadre(0);
                         if (!StringUtils.isBlank(tablePosicion.getString("KNTTP")) && !tablePosicion.getString("KNTTP").equalsIgnoreCase("U")) {
                             String codeCuentaMayor = tablePosicion.getString("SAKTO");
                             String codeCuentaImputacion = "";
                             if (tablePosicion.getString("KNTTP").equalsIgnoreCase("K"))
                                 codeCuentaImputacion = tablePosicion.getString("KOSTL");
                             if (tablePosicion.getString("KNTTP").equalsIgnoreCase("P"))
                                 codeCuentaImputacion = tablePosicion.getString("POSID");
                             if (tablePosicion.getString("KNTTP").equalsIgnoreCase("F"))
                                 codeCuentaImputacion = tablePosicion.getString("AUFNR");
                             //Guardar imputacion
                             if (!StringUtils.isBlank(codeCuentaImputacion) && !StringUtils.isBlank(tablePosicion.getString("BUKRS"))) {
                                 String finalCodeCuentaImputacion = codeCuentaImputacion;
                                 Optional<MtrCuentaImputacion> optionalCuentaImputacion = listaCuentaImputacion.stream()
                                         .filter(x -> tablePosicion.getString("KNTTP").equalsIgnoreCase(x.getMtrTipoImputacion().getCodigoTipoImputacion()) &&
                                                 finalCodeCuentaImputacion.equalsIgnoreCase(x.getCodigoCuentaImputacion()) &&
                                                 tablePosicion.getString("BUKRS").equalsIgnoreCase(x.getMtrSociedad().getDescBrv())).findFirst();
                                 if (optionalCuentaImputacion.isPresent())
                                     detalle.setMtrCuentaImputacion(optionalCuentaImputacion.get());
                             }
                             //Guardar cuenta mayor
                             if (!StringUtils.isBlank(codeCuentaMayor) && !StringUtils.isBlank(tablePosicion.getString("BUKRS"))) {

                                 Optional<MtrCuentaMayor> optionalCuentaMayor = listaCuentaMayor.stream()
                                         .filter(x -> tablePosicion.getString("KNTTP").equalsIgnoreCase(x.getMtrTipoImputacion().getCodigoTipoImputacion()) &&
                                                 codeCuentaMayor.equalsIgnoreCase(x.getCodigoCuentaMayor()) &&
                                                 tablePosicion.getString("BUKRS").equalsIgnoreCase(x.getMtrSociedad().getDescBrv())).findFirst();
                                 if (optionalCuentaMayor.isPresent())
                                     detalle.setMtrCuentaMayor(optionalCuentaMayor.get());
                             }


                         }


                         if (!StringUtils.isBlank(tablePosicion.getString("MATNR"))) {
                             Optional<MtrBienServicio> optionaBsAux = listaBienServicio.stream()
                                     .filter(x -> tablePosicion.getString("MATNR").equalsIgnoreCase(x.getCodigoSap()) &&
                                             "M".equalsIgnoreCase(x.getTipoItem()))
                                     .findFirst();
                             if (optionaBsAux.isPresent()) {
                                 detalle.setMtrBienServicio(optionaBsAux.get());
                             }/*else {
                                        detalle.setTextoAdicional(tablePos.getString("TXZ01"));
                                    }*/
                         } else {
                             detalle.setTextoItem(tablePosicion.getString("TXZ01"));
                         }

                         BigDecimal cantEntregada = new BigDecimal("0.0");
                         logger.error("descargaDoc.getCanent(): " + tablePosicion.getString("CANENT"));
                         //log.error("descargaDoc.getCanent()x: " + descargaDoc.getCanent());
                         if (!StringUtils.isBlank(tablePosicion.getString("CANENT"))) {
                             //java.sql.Date sDateEntregada = new java.sql.Date(format.parse(descargaDoc.getCanent()).getTime());
                             cantEntregada = new BigDecimal(tablePosicion.getString("CANENT").trim());

                         }

                         detalle.setCantidadEntregada(cantEntregada);
                         BigDecimal cantidadRequerida = new BigDecimal("0.0");
                         logger.error("descargaDoc.getCanreq(): " +tablePosicion.getString("CANREQ"));
                         //log.error("descargaDoc.getCanreq()x: " + descargaDoc.getCanreq());
                         if (!StringUtils.isBlank(tablePosicion.getString("CANREQ")) && tablePosicion.getString("CANREQ") != null) {
                             //java.sql.Date sDateRequerida = new java.sql.Date(format.parse(descargaDoc.getCanreq()).getTime());
                             cantidadRequerida = new BigDecimal(tablePosicion.getString("CANREQ").trim());

                         }
                         detalle.setCantidadRequerida(cantidadRequerida);
                         //detalle.setCerCuentaMayor();
                         logger.error("descargaDoc.getFecent(): " + tablePosicion.getString("FECENT"));
                         //log.error("descargaDoc.getFecent()x: " + descargaDoc.getFecent());
                         if (!StringUtils.isBlank(tablePosicion.getString("FECENT")) && !tablePosicion.getString("FECENT").equalsIgnoreCase("00000000")) {
                             java.sql.Date fecent = new java.sql.Date(formatOut.parse(tablePosicion.getString("FECENT").trim()).getTime());
                             detalle.setFechaEntrega(fecent);
                         }
                         logger.error("NFECENT : " + tablePosicion.getString("NFECENT"));
                         if(!StringUtils.isBlank(tablePosicion.getString("NFECENT")) && !tablePosicion.getString("NFECENT").trim().equalsIgnoreCase("00000000")) {
                             java.sql.Date fecentx = new java.sql.Date(formatOut.parse(tablePosicion.getString("NFECENT").trim()).getTime());
                             detalle.setNuevaFechaEntrega(fecentx);
                         }
                         logger.error("PLIFZ : " + tablePosicion.getString("PLIFZ"));
                         if(!StringUtils.isBlank(tablePosicion.getString("PLIFZ"))) {
                             detalle.setPlazoEntrega(tablePosicion.getString("PLIFZ").trim());
                         }
                         logger.error("descargaDoc.getPrecio(): " + tablePosicion.getString("PRECIO"));
                         //log.error("descargaDoc.getPrecio()x: " + descargaDoc.getPrecio());
                         BigDecimal precio = new BigDecimal("0.0");
                         if (!StringUtils.isBlank(tablePosicion.getString("PRECIO"))) {
                             precio = new BigDecimal(tablePosicion.getString("PRECIO").trim());

                         }
                         detalle.setPrecioUnitario(precio);
                         CerNotaPedidoDetalle detalleOut = this.cerNotaPedidoDetalleDeltaRepository.save(detalle);
                         //listaEntity.add(detalle);
                         //detalle.setMtrAlmacen();
                         //detalle.setMtrBienServicio();
                         //detalle.setMtrCentro();
                         for (DescargaServicioSap servicio : listaServicio) {
                             if (servicio.getEbeln().equalsIgnoreCase(tablePosicion.getString("EBELN")) &&
                                     servicio.getEbelp().equalsIgnoreCase(tablePosicion.getString("EBELP"))) {

                                 Optional<CerNotaPedidoDetalle> optionalServicio = listaDetalle.stream()
                                         .filter(x -> servicio.getEbeln().equalsIgnoreCase(x.getEbeln()) && servicio.getEbelp().equalsIgnoreCase(x.getPosicionSap())
                                                 && servicio.getExtrow().equalsIgnoreCase(x.getExtrow()))
                                         .findFirst();
                                 CerNotaPedidoDetalle detalleServicio = new CerNotaPedidoDetalle();
                                 if (optionalServicio.isPresent())
                                     detalleServicio = optionalServicio.get();

                                 detalleServicio.setCerNotaPedido(pedido);
                                 detalleServicio.setMtrCentro(optionalCentro.get());
                                 detalleServicio.setPosicionSap(servicio.getEbelp());
                                 detalleServicio.setEbeln(servicio.getEbeln());
                                 detalleServicio.setExtrow(servicio.getExtrow());
                                 detalleServicio.setIntrow(servicio.getIntrow());
                                 detalleServicio.setIdPadre(detalleOut.getId());
                                 detalleServicio.setUnidadTextoItem(servicio.getUnimed());

                                 //Datos para detalle de psocicion
                                 if (!StringUtils.isBlank(servicio.getKnttp()) && !servicio.getKnttp().equalsIgnoreCase("U")) {
                                     String codeCuentaMayor = servicio.getSakto();
                                     String codeCuentaImputacion = "";
                                     if (servicio.getKnttp().equalsIgnoreCase("K"))
                                         codeCuentaImputacion = servicio.getKostl();
                                     if (servicio.getKnttp().equalsIgnoreCase("P"))
                                         codeCuentaImputacion = servicio.getPosid();
                                     if (servicio.getKnttp().equalsIgnoreCase("F"))
                                         codeCuentaImputacion = servicio.getAufnr();
                                     //Guardar imputacion
                                     if (!StringUtils.isBlank(codeCuentaImputacion) && !StringUtils.isBlank(servicio.getBurks())) {
                                         String finalCodeCuentaImputacion = codeCuentaImputacion;
                                         Optional<MtrCuentaImputacion> optionalCuentaImputacion = listaCuentaImputacion.stream()
                                                 .filter(x -> servicio.getKnttp().equalsIgnoreCase(x.getMtrTipoImputacion().getCodigoTipoImputacion()) &&
                                                         finalCodeCuentaImputacion.equalsIgnoreCase(x.getCodigoCuentaImputacion()) &&
                                                         servicio.getBurks().equalsIgnoreCase(x.getMtrSociedad().getDescBrv())).findFirst();
                                         if (optionalCuentaImputacion.isPresent())
                                             detalleServicio.setMtrCuentaImputacion(optionalCuentaImputacion.get());
                                     }
                                     //Guardar cuenta mayor
                                     if (!StringUtils.isBlank(codeCuentaMayor) && !StringUtils.isBlank(servicio.getBurks())) {

                                         Optional<MtrCuentaMayor> optionalCuentaMayor = listaCuentaMayor.stream()
                                                 .filter(x -> servicio.getKnttp().equalsIgnoreCase(x.getMtrTipoImputacion().getCodigoTipoImputacion()) &&
                                                         codeCuentaMayor.equalsIgnoreCase(x.getCodigoCuentaMayor()) &&
                                                         servicio.getBurks().equalsIgnoreCase(x.getMtrSociedad().getDescBrv())).findFirst();
                                         if (optionalCuentaMayor.isPresent())
                                             detalleServicio.setMtrCuentaMayor(optionalCuentaMayor.get());
                                     }


                                 }
                                 //Fin

                                 if (!StringUtils.isBlank(servicio.getCodBienServicio())) {
                                     Optional<MtrBienServicio> optionaBsServicioAux = listaBienServicio.stream()
                                             .filter(x -> servicio.getCodBienServicio().equalsIgnoreCase(x.getCodigoSap()) &&
                                                     "S".equalsIgnoreCase(x.getTipoItem()))
                                             .findFirst();
                                     if (optionaBsServicioAux.isPresent()) {
                                         detalleServicio.setMtrBienServicio(optionaBsServicioAux.get());
                                     }/*else {
                                        detalle.setTextoAdicional(tablePos.getString("TXZ01"));
                                    }*/
                                 } else {
                                     detalleServicio.setTextoItem(servicio.getTextoAdicional());
                                 }

                                 //Cantifdades y precios
                                 BigDecimal cantEntregadaServicio = new BigDecimal("0.0");
                                 logger.error("servicio.getCanent() 2: " + servicio.getCanent());

                                 if (!StringUtils.isBlank(servicio.getCanent())) {
                                     //java.sql.Date sDateEntregada = new java.sql.Date(format.parse(descargaDoc.getCanent()).getTime());
                                     cantEntregadaServicio = new BigDecimal(servicio.getCanent().trim());

                                 }

                                 detalleServicio.setCantidadEntregada(cantEntregadaServicio);

                                 BigDecimal cantidadRequeridaServicio = new BigDecimal("0.0");
                                 logger.error("servicio.getCanreq() 2: " + servicio.getCanreq());

                                 if (!StringUtils.isBlank(servicio.getCanreq()) && servicio.getCanreq() != null) {
                                     //java.sql.Date sDateRequerida = new java.sql.Date(format.parse(descargaDoc.getCanreq()).getTime());
                                     cantidadRequeridaServicio = new BigDecimal(servicio.getCanreq().trim());

                                 }
                                 detalleServicio.setCantidadRequerida(cantidadRequeridaServicio);
                                 //detalle.setCerCuentaMayor();
                                 logger.error("servicio.getFecent() 2: " + servicio.getFecent());

                                 if (!StringUtils.isBlank(tablePosicion.getString("FECENT")) && !tablePosicion.getString("FECENT").equalsIgnoreCase("00000000")) {
                                     java.sql.Date fecent = new java.sql.Date(formatOut.parse(tablePosicion.getString("FECENT").trim()).getTime());
                                     detalleServicio.setFechaEntrega(fecent);
                                 }
                                 logger.error("servicio.getPrecio() 2: " + servicio.getPrecio());

                                 BigDecimal precioServicio = new BigDecimal("0.0");
                                 if (!StringUtils.isBlank(servicio.getPrecio())) {
                                     precioServicio = new BigDecimal(servicio.getPrecio().trim());

                                 }
                                 detalleServicio.setPrecioUnitario(precioServicio);
                                 //listaEntity.add(detalleServicio);
                                 this.cerNotaPedidoDetalleDeltaRepository.save(detalleServicio);

                             }
                         }


                         //Cargar Hijos

                         /*if (i < 100)
                             lista.add(descargaDoc);*/


                         //}

                     }
                 }


             }
             //this.cerNotaPedidoDetalleDeltaRepository.saveAll(listaEntity);

         }  catch (ParseException e) {
             String error = Utils.obtieneMensajeErrorException(e);
             descarga.setCabtx(error);
             lista.add(descarga);
         }

         //return lista;

     }
    @Override
    public List<DescargaServicioSap> listaDescarga(List<RangeSap> rangeDoc, List<RangeSap> rangeFecha) {
        List<DescargaServicioSap> lista = new ArrayList<DescargaServicioSap>();
        DescargaServicioSap descarga = new DescargaServicioSap();
        //Listas de dependencias
        List<MtrProveedor> listaProveedor = this.mtrProveedorDeltaRepository.findAll();
        List<MtrCondicionPago> listaCondicion = this.mtrCondicionPagoDeltaRepository.findAll();
        List<MtrEstado> listaEstado = this.mtrEstadoDeltaRepository.findAll();
        List<MtrMoneda> listaMoneda = this.mtrMonedaDeltaRepository.findAll();
        List<MtrOrgCompra> listaOrgCompra = this.mtrOrgCompraDeltaRepository.findAll();
        List<MtrSociedad> listaSociedad = this.mtrSociedadDeltaRepository.findAll();
        List<MtrClaseDocumento> listaDoc = this.mtrClaseDocumentoDeltaRepository.findAll();
        //List<MtrCentroAlmacen> listaCentro = this.mtrCentroAlmacenDeltaRepository.findAll();
        //Lista de cabecera detalle
        List<CerNotaPedido> listaOrden = this.cerNotaPedidoDeltaRepository.findAll();
        List<CerNotaPedidoDetalle> listaDetalle = this.cerNotaPedidoDetalleDeltaRepository.findAll();
        List<CerFirma> listaCerFirma = this.cerFirmaDeltaRepository.findAll();
        List<MtrTipoFirma> listaTipoFirma = this.mtrTipoFirmaDeltaRepository.findAll();
        List<MtrAprobador> listaAprobador = this.mtrAprobadorDeltaRepository.findAll();
        List<AppParametria> listaParametria = this.appParametriaDeltaRepository.findAll();


        //Obtener parametro de estado inicial para posiciones de pedido
        String codEstadoInicial = "NPCE";
        Optional<AppParametria> optionalParametroEstado = listaParametria.stream()
                .filter(x -> "IPROVIDER".equalsIgnoreCase(x.getModulo())
                        && "Estado Inicial Posicion".equalsIgnoreCase(x.getLabel()))
                .findFirst();
        if (optionalParametroEstado.isPresent())
            codEstadoInicial = optionalParametroEstado.get().getValue1();
        java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyy/MM/dd");
        java.text.SimpleDateFormat formatOut = new java.text.SimpleDateFormat("yyyyMMdd");

        String[] arrAttributesName = new String[]{"EBELN", "EKORG", "LIFNR", "ERNAM", "FIRMAA1", "FIRMAA2", "FIRMAA3", "FIRMAA4",
                "FIRMAB1",
                "FIRMAB2",
                "FIRMAB3",
                "FIRMAB4",
                "WAERS",
                "VIGDES",
                "VIGHAS",
                "TIPDOC",
                "BEDAT",
                "CLDOC",
                "WERKS",
                "NAME1",
                "PEDIDO_VERSION",
                "ZTERM",
                "EBELP",
                "TXZ01",
                "FECENT",
                "PRECIO",
                "KNTTP",
                "LGORT",
                "MATKL",
                "WGBEZ",
                "PACKNO",
                "INTROW",
                "EXTROW",
                "SRVPOS",
                "DESCRI",
                "UNIMED",
                "CANREQ",
                "CANENT",
                //"PRECIO2",
                "SAKTO",
                "KOSTL",
                "POSID",
                "AUFNR",
                "CABTX",
                "ZPLAZO",
                "PRETP"};
        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_DESCARGA_DOC_COMPRA");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            JCoTable tableImportDocCompra = imports.getTable("TI_EBELN");
            JCoTable tableImportFechaPedido = imports.getTable("TI_BEDAT");
            //Poblamos Rango documento de compras
            if (rangeDoc != null && rangeDoc.size() > 0) {
                for (RangeSap ele : rangeDoc) {
                    tableImportDocCompra.appendRow();
                    tableImportDocCompra.setValue("SIGN", ele.getSign());
                    tableImportDocCompra.setValue("OPTION", ele.getOption());
                    tableImportDocCompra.setValue("LOW", ele.getLow());
                    tableImportDocCompra.setValue("HIGH", ele.getHigh());
                }
            }
            //Poblamos Rango fecha de pedidos
            if (rangeFecha != null && rangeFecha.size() > 0) {
                for (RangeSap ele : rangeFecha) {
                    tableImportFechaPedido.appendRow();
                    tableImportFechaPedido.setValue("SIGN", ele.getSign());
                    tableImportFechaPedido.setValue("OPTION", ele.getOption());


                    java.util.Date utilDInicio = format.parse(ele.getLow());
                    java.util.Date utilDFin = format.parse(ele.getHigh());

                    tableImportFechaPedido.setValue("LOW", utilDInicio);
                    tableImportFechaPedido.setValue("HIGH", utilDFin);
                }
            }
            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExportDescargaServicio = exports.getTable("TO_DESC_SERV");
            JCoTable tablePos = exports.getTable("TO_TCAB");
            List<DescargaServicioSap> listaBienServioAuxiliar = new ArrayList<DescargaServicioSap>();
            for (int i = 0; i < tablePos.getNumRows(); i++) {
                //DescargaServicioSap des = new DescargaServicioSap();
                tablePos.setRow(i);
                DescargaServicioSap bs = new DescargaServicioSap();
                bs.setEbeln(tablePos.getString("EBELN"));
                //bs.setEbelp(tablePos.getString("EBELP"));
                bs.setErnam(tablePos.getString("ERNAM"));
                bs.setSmtpAddr(tablePos.getString("SMTP_ADDR"));
                bs.setZkate(tablePos.getString("ZKDATE"));
                bs.setZplazo(tablePos.getString("ZPLAZO"));
                bs.setTipo(tablePos.getString("TIPO"));
                bs.setMonto(tablePos.getString("VALOR_AJUSTADO"));
                bs.setNameText(tablePos.getString("NAME_TEXT"));
                //bs.set
                //bs.setUnimed();
                //UNIMED
                //bs.set n/av

                listaBienServioAuxiliar.add(bs);

            }


            List<CerNotaPedido> listaEntity = new ArrayList<CerNotaPedido>();
            //Recuperar descarga
            String ebelnAux = "XYZ";
            for (int i = 0; i < tableExportDescargaServicio.getNumRows(); i++) {

                //DescargaServicioSap des = new DescargaServicioSap();
                tableExportDescargaServicio.setRow(i);
                if (ebelnAux.equalsIgnoreCase(tableExportDescargaServicio.getString("EBELN"))) {
                    continue;
                }
                ebelnAux = tableExportDescargaServicio.getString("EBELN");
                DescargaServicioSap descargaDoc = new DescargaServicioSap();
                //Setear cada valor al bean desde SAP
                for (String attributeName : arrAttributesName) {
                    Class<DescargaServicioSap> clazz = DescargaServicioSap.class;
                    Field fieldName = clazz.getDeclaredField(attributeName.toLowerCase());
                    fieldName.setAccessible(true);
                    fieldName.set(descargaDoc, tableExportDescargaServicio.getString(attributeName));

                }
                //Setear Valores a la tabla
                CerNotaPedido pedido = new CerNotaPedido();

                Optional<CerNotaPedido> optionalPedido = listaOrden.stream()
                        .filter(x -> descargaDoc.getEbeln().equalsIgnoreCase(x.getCodigoNotaPedidoSap()))
                        .findFirst();
                if (optionalPedido.isPresent())
                    pedido = optionalPedido.get();

                Optional<MtrProveedor> optionalProveedor = listaProveedor.stream()
                        .filter(x -> descargaDoc.getLifnr().equalsIgnoreCase(x.getLifnr()))
                        .findFirst();

                logger.error("========================= orden compra cabecera" + descargaDoc.getEbeln() + "=============================================");
                if (optionalProveedor.isPresent()) {
                    logger.error("Proveedor ok");
                    //log.error("Proveedor ok");
                    Optional<MtrCondicionPago> optionalCondicion = listaCondicion.stream()
                            .filter(x -> descargaDoc.getZterm().equalsIgnoreCase(x.getCodigoCondicionPagoSap()))
                            .findFirst();
                    if (optionalCondicion.isPresent()) {
                        logger.error("condicion pago ok");
                        //log.error("condicion pago ok");
                        // String finalEstadoInicial = estadoInicial;
                        //String finalCodEstadoFinal = codEstadoFinal;
                        String finalCodEstadoInicial = codEstadoInicial;
                        Optional<MtrEstado> optionalEstado = listaEstado.stream()
                                .filter(x -> finalCodEstadoInicial.equalsIgnoreCase(x.getCodigoEstado()))
                                .findFirst();
                        if (optionalEstado.isPresent()) {
                            logger.error("Estado ok");
                            //log.error("Estado ok");

                            Optional<MtrMoneda> optionalMoneda = listaMoneda.stream()
                                    .filter(x -> descargaDoc.getWaers().equalsIgnoreCase(x.getDescBrv()))
                                    .findFirst();
                            if (optionalMoneda.isPresent()) {
                                logger.error("Moneda ok");
                                //log.error("Moneda ok");
                                Optional<MtrOrgCompra> optionalOrg = listaOrgCompra.stream()
                                        .filter(x -> descargaDoc.getEkorg().equalsIgnoreCase(x.getCodigoOrgCompraSap()))
                                        .findFirst();
                                if (optionalOrg.isPresent()) {
                                    logger.error("Organizacion ok");
                                    //log.error("Organizacion ok");
                                    /*Optional<MtrCentroAlmacen> optionalCentro = listaCentro.stream()
                                            .filter(x -> descargaDoc.getWerks().equalsIgnoreCase(x.getCodigoCentroSap()))
                                            .findFirst();
                                    if(optionalCentro.isPresent()) {

                                    }*/
                                    Optional<MtrSociedad> optionalSociedad = listaSociedad.stream()
                                            .filter(x -> tableExportDescargaServicio.getString("BUKRS").equalsIgnoreCase(x.getDescBrv()))
                                            .findFirst();
                                    if (optionalSociedad.isPresent()) {
                                        logger.error("Sociedad ok");
                                        //log.error("Sociedad ok");
                                        Optional<MtrClaseDocumento> optionalClase = listaDoc.stream()
                                                .filter(x -> descargaDoc.getCldoc().equalsIgnoreCase(x.getCodigoSap()))
                                                .findFirst();
                                        if (optionalClase.isPresent()) {
                                            logger.error("Clase doc ok");
                                            //log.error("Clase doc ok");
                                            pedido.setMtrProveedor(optionalProveedor.get());
                                            pedido.setMtrCondicionPago(optionalCondicion.get());
                                            pedido.setMtrEstado(optionalEstado.get());
                                            pedido.setMtrMoneda(optionalMoneda.get());
                                            pedido.setMtrOrgCompra(optionalOrg.get());
                                            pedido.setMtrSociedad(optionalSociedad.get());
                                            pedido.setMtrClaseDocumento(optionalClase.get());

                                            /*if() {

                                            }*/

                                            pedido.setCodigoNotaPedidoSap(descargaDoc.getEbeln());
                                            Optional<DescargaServicioSap> optionalDatosAdicionales = listaBienServioAuxiliar.stream()
                                                    .filter(x -> descargaDoc.getEbeln().equalsIgnoreCase(x.getEbeln()))
                                                    .findFirst();
                                            if (optionalDatosAdicionales.isPresent()) {
                                                pedido.setUserCompra(optionalDatosAdicionales.get().getErnam());
                                                pedido.setEmailUserCompra(optionalDatosAdicionales.get().getSmtpAddr());
                                                pedido.setTipo(optionalDatosAdicionales.get().getTipo());
                                                pedido.setMonto(new BigDecimal("0.00"));
                                                if (!StringUtils.isBlank(optionalDatosAdicionales.get().getMonto())) {
                                                    if (!optionalDatosAdicionales.get().getMonto().trim().equalsIgnoreCase("n/a")) {
                                                        pedido.setMonto(new BigDecimal(optionalDatosAdicionales.get().getMonto().trim()));
                                                    }
                                                }
                                                if (!StringUtils.isBlank(optionalDatosAdicionales.get().getZplazo())) {
                                                    pedido.setPlazo(Integer.parseInt(optionalDatosAdicionales.get().getZplazo().trim()));
                                                }
                                                if (!StringUtils.isBlank(optionalDatosAdicionales.get().getZkate())
                                                        && !optionalDatosAdicionales.get().getZkate().equalsIgnoreCase("00000000")) {
                                                    pedido.setFechaFinVigencia(formatOut.parse(optionalDatosAdicionales.get().getZkate().trim()));
                                                }
                                                pedido.setNombreCompletoCompra(optionalDatosAdicionales.get().getNameText());
                                            }

                                            if (!StringUtils.isBlank(descargaDoc.getBedat()) && !descargaDoc.getBedat().equalsIgnoreCase("00000000"))
                                                pedido.setFechaDocumento(formatOut.parse(descargaDoc.getBedat().trim()));
                                            if (!StringUtils.isBlank(descargaDoc.getVigdes()) && !descargaDoc.getVigdes().equalsIgnoreCase("00000000"))
                                                pedido.setFechaInicio(formatOut.parse(descargaDoc.getVigdes().trim()));
                                            if (!StringUtils.isBlank(descargaDoc.getVighas()) && !descargaDoc.getVighas().equalsIgnoreCase("00000000"))
                                                pedido.setFechaFin(formatOut.parse(descargaDoc.getVighas().trim()));

                                            CerNotaPedido pedidoOut = this.cerNotaPedidoDeltaRepository.save(pedido);
                                            //this.cerFirmaDeltaRepository.deleteByEbeln(pedidoOut.getCodigoNotaPedidoSap());

                                            //Inicio eliminar y/o Actualizar Firmas - en Cascada
                                            List<CerFirma> filteredList = listaCerFirma.stream()
                                                    .filter(fm ->
                                                            fm.getCerNotaPedido().getCodigoNotaPedidoSap().equalsIgnoreCase(pedidoOut.getCodigoNotaPedidoSap()))
                                                    .collect(Collectors.toList());

                                            if(filteredList != null && filteredList.size() > 0) {
                                                for (CerFirma ele: filteredList) {
                                                    //System.out.println("" + ele.getId());
                                                    this.cerCertificadoFirmaDeltaRepository.deleteByFirmaId(ele.getId());
                                                }

                                            }
                                            this.cerFirmaDeltaRepository.deleteByEbeln(pedidoOut.getCodigoNotaPedidoSap());
                                            //Inicio eliminar y/o Actualizar Firmas
                                            log.error("carga uno getFirmaa1 " + descargaDoc.getFirmaa1());
                                            if (!StringUtils.isBlank(descargaDoc.getFirmaa1())) {
                                                log.error("carga uno getFirmaa1 ok " + descargaDoc.getFirmaa1());
                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FA".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> descargaDoc.getFirmaa1().trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {
                                                        /*Optional<CerFirma> optionalCerFirma = listaCerFirma.stream()
                                                                .filter(x -> optionalTipoFirma.get().getId() == x.getMtrTipoFirma().getId() &&
                                                                        pedidoOut.getId() == x.getCerNotaPedido().getId() &&
                                                                        descargaDoc.getFirmaa1().trim().equalsIgnoreCase(x.getMtrAprobador().getAprobadorSap()))
                                                                .findFirst();*/
                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(descargaDoc.getEbeln());
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    }


                                                }

                                            }
                                            log.error("carga uno getFirmaa2 ok " + descargaDoc.getFirmaa2());
                                            if (!StringUtils.isBlank(descargaDoc.getFirmaa2())) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FA".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> descargaDoc.getFirmaa2().trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(descargaDoc.getEbeln());
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    }


                                                }

                                            }
                                            log.error("carga uno getFirmaa3 ok " + descargaDoc.getFirmaa3());
                                            if (!StringUtils.isBlank(descargaDoc.getFirmaa3())) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FA".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> descargaDoc.getFirmaa3().trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(descargaDoc.getEbeln());
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    }


                                                }

                                            }
                                            log.error("carga uno getFirmaa4 ok " + descargaDoc.getFirmaa4());
                                            if (!StringUtils.isBlank(descargaDoc.getFirmaa4())) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FA".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> descargaDoc.getFirmaa4().trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(descargaDoc.getEbeln());
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    }


                                                }

                                            }
                                            //Firma b
                                            log.error("carga uno getFirmab1 ok " + descargaDoc.getFirmab1());
                                            if (!StringUtils.isBlank(descargaDoc.getFirmab1())) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FB".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> descargaDoc.getFirmab1().trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(descargaDoc.getEbeln());
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    }


                                                }

                                            }
                                            log.error("carga uno getFirmab2 ok " + descargaDoc.getFirmab2());
                                            if (!StringUtils.isBlank(descargaDoc.getFirmab2())) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FB".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> descargaDoc.getFirmab2().trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(descargaDoc.getEbeln());
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    }


                                                }

                                            }
                                            log.error("carga uno getFirmab3 ok " + descargaDoc.getFirmab3());
                                            if (!StringUtils.isBlank(descargaDoc.getFirmab3())) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FB".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> descargaDoc.getFirmab3().trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(descargaDoc.getEbeln());
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    }


                                                }

                                            }
                                            log.error("carga uno getFirmab4 ok " + descargaDoc.getFirmab4());
                                            if (!StringUtils.isBlank(descargaDoc.getFirmab4())) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FB".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> descargaDoc.getFirmab4().trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(descargaDoc.getEbeln());
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    }


                                                }

                                            }

                                            if (i < 100)
                                                lista.add(descargaDoc);

                                            //listaEntity.add(pedido);
                                        }
                                    }

                                }
                            }
                        }
                    }

                }


            }
            //this.cerNotaPedidoDeltaRepository.saveAll(listaEntity);

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
            // lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (NoSuchFieldException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (IllegalAccessException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (ParseException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
        }

        return lista;

    }

    @Override
    public List<RemitoOutSap> creacionHes(List<RemitoInSap> listaIn) {
        List<RemitoOutSap> lista = new ArrayList<RemitoOutSap>();
        RemitoOutSap remito = new RemitoOutSap();
        String[] arrAttributesName = new String[]{"EBELN",
                "POSICION",
                "PACNO",
                "INTROW",
                "CENTRO",
                "OCURRENCIA",
                "EXTROW",
                "EXTGROUP",
                "RANG",
                "SUBPACNO",
                "SRVNBR",
                "UMEDIDA",
                "QAPRO",
                "RMPRV",
                "LOCDES",
                "IMPUTACION",
                "USRSOLIC",
                "MATPRV",
                "MND",
                "PUNITARIO",
                "DESCUENTO",
                "ITEMAD",
                "TXZ01",
                "MATKL",
                "SAKNR",
                "KOSTL",
                "POSID",
                "USRAAUTO",
                "DLORT",
                "AUFNR",
                "LIFNR",
                "EKORG",
                "EKGRP",
                "LZVON",
                "LZBIS",
                "SBNAMAN",
                "BUDAT",
                "DESCUENTOH",
                "LGORT",
                "RESWK"};

        log.error("creacionHes ::: 01");
        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_CREA_HES");
            log.error("creacionHes ::: 02");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            JCoTable tableImport = imports.getTable("IT_TCERT");
            log.error("creacionHes ::: 03");
            //Poblamos datos de entrada
            for (RemitoInSap ele : listaIn) {
                tableImport.appendRow();
                for (String attributeName : arrAttributesName) {
                    Class<RemitoInSap> clazz = RemitoInSap.class;
                    Field fieldName = clazz.getDeclaredField(attributeName.toLowerCase());
                    fieldName.setAccessible(true);
                    String value = (String) fieldName.get(ele);
                    tableImport.setValue(attributeName, value);

                }
                log.error("creacionHes ::: 04");
                tableImport.setValue("PACKAGE", ele.getPackagex());
            }

            //Ejecutar Funcion
            log.error("creacionHes ::: 04_01");
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExport = exports.getTable("TO_REMITOSAP");
            log.error("creacionHes ::: 05");
            //Recuperar datos de salida
            for (int i = 0; i < tableExport.getNumRows(); i++) {

                tableExport.setRow(i);
                RemitoOutSap ele = new RemitoOutSap();

                ele.setIntrow(tableExport.getString("INTROW"));
                ele.setImporte(tableExport.getString("IMPORTE"));
                ele.setError(tableExport.getString("ERROR"));
                ele.setEbeln(tableExport.getString("EBELN"));
                ele.setPosicion(tableExport.getString("POSICION"));
                ele.setPacno(tableExport.getString("PACNO"));
                ele.setCentro(tableExport.getString("CENTRO"));
                ele.setOcurrencia(tableExport.getString("OCURRENCIA"));
                ele.setEntrega(tableExport.getString("ENTREGA"));
                ele.setRmprv(tableExport.getString("RMPRV"));
                ele.setState(tableExport.getString("STATE"));
                ele.setMnd(tableExport.getString("MND"));
                lista.add(ele);

            }
            log.error("creacionHes ::: 10");

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            remito.setCentro(error);
            lista.add(remito);
            log.error("creacionHes ::: 04");
            // lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            remito.setCentro(error);
            lista.add(remito);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
            log.error("creacionHes ::: 11" + error);
        } catch (NoSuchFieldException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            remito.setCentro(error);
            lista.add(remito);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
            log.error("creacionHes ::: 12" + error);
        } catch (IllegalAccessException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            remito.setCentro(error);
            lista.add(remito);
            log.error("creacionHes ::: 13" + error);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        }

        return lista;
    }

    @Override
    public List<RemitoOutSap> crearHes(List<RemitoInSap> listaIn) {
        List<RemitoOutSap> lista = new ArrayList<RemitoOutSap>();
        RemitoOutSap remito = new RemitoOutSap();
        try {
            log.error("crearHes_____01");
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            log.error("crearHes_____02");
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_CREA_HES");
            log.error("crearHes_____03");

            JCoParameterList imports = stfcConnection.getImportParameterList();

            JCoTable tableImport = imports.getTable("IT_TCERT");
            log.error("crearHes_____04");
            //JCoTable tableImportFechaPedido = imports.getTable("TI_BEDAT");
            //Poblamos Rango documento de compras
            for (RemitoInSap ele : listaIn) {
                tableImport.appendRow();
                tableImport.setValue("EBELN", ele.getEbeln());
                tableImport.setValue("POSICION", ele.getPosicion());
                tableImport.setValue("PACNO", ele.getPacno());
                tableImport.setValue("INTROW", ele.getIntrow());
                tableImport.setValue("CENTRO", ele.getCentro());
                tableImport.setValue("OCURRENCIA", ele.getOcurrencia());
                tableImport.setValue("EXTROW", ele.getExtrow());
                tableImport.setValue("EXTGROUP", ele.getExtgroup());
                tableImport.setValue("RANG", ele.getRang());
                tableImport.setValue("PACKAGE", ele.getPackagex());
                tableImport.setValue("SUBPACNO", ele.getSubpacno());
                tableImport.setValue("SRVNBR", ele.getSrvnbr());
                tableImport.setValue("UMEDIDA", ele.getUmedida());
                tableImport.setValue("QAPRO", ele.getQapro());
                tableImport.setValue("RMPRV", ele.getRmprv());
                tableImport.setValue("LOCDES", ele.getLocdes());
                tableImport.setValue("IMPUTACION", ele.getImputacion());
                tableImport.setValue("USRSOLIC", ele.getUsrsolic());
                log.error("ele.getUsrsolic() ::: " + ele.getUsrsolic());
                tableImport.setValue("MATPRV", ele.getMatprv());
                tableImport.setValue("MND", ele.getMnd());
                tableImport.setValue("PUNITARIO", ele.getPunitario());
                tableImport.setValue("DESCUENTO", ele.getDescuento());
                tableImport.setValue("ITEMAD", ele.getItemad());
                tableImport.setValue("TXZ01", ele.getTxz01());
                tableImport.setValue("MATKL", ele.getMatkl());
                tableImport.setValue("SAKNR", ele.getSaknr());
                log.error("ele.getSaknr() ::: " + ele.getSaknr());
                tableImport.setValue("KOSTL", ele.getKostl());
                log.error("ele.getKostl() ::: " + ele.getKostl());
                tableImport.setValue("POSID", ele.getPosid());
                log.error("ele.getPosid() ::: " + ele.getPosid());
                tableImport.setValue("USRAAUTO", ele.getUsraauto());
                log.error("ele.getUsraauto() ::: " + ele.getUsraauto());
                if (!StringUtils.isBlank(ele.getPrestServ()))
                   tableImport.setValue("DLORT", ele.getPrestServ());
                else
                    tableImport.setValue("DLORT", ele.getDlort());
                log.error("ele.getPrestServ() ::: " + ele.getPrestServ());
                tableImport.setValue("AUFNR", ele.getAufnr());
                log.error("ele.getAufnr() ::: " + ele.getAufnr());
                tableImport.setValue("LIFNR", ele.getLifnr());
                tableImport.setValue("EKORG", ele.getEkorg());
                tableImport.setValue("EKGRP", ele.getEkgrp());
                tableImport.setValue("LZVON", ele.getLzvon());
                tableImport.setValue("LZBIS", ele.getLzbis());
                //tableImport.setValue("SBNAMAN", ele.get);
                tableImport.setValue("BUDAT", ele.getBudat());
                tableImport.setValue("DESCUENTOH", ele.getDescuento());
                tableImport.setValue("LGORT", ele.getLgort());
                tableImport.setValue("RESWK", ele.getReswk());
                tableImport.setValue("BKTXT", ele.getGuiaRemision());
                tableImport.setValue("FIRMAA", ele.getFirma());
                //tableImport.setValue("BSART",  ele.getbs);

            }
            log.error("crearHes_____05");


            //Ejecutar Funcion
            stfcConnection.execute(destination);
            log.error("crearHes_____06");
            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            log.error("crearHes_____07");
            JCoTable tableExport = exports.getTable("TO_REMITOSAP");
            log.error("crearHes_____08");
            for (int i = 0; i < tableExport.getNumRows(); i++) {
                log.error("crearHes_____09_" + i);
                tableExport.setRow(i);
                RemitoOutSap ele = new RemitoOutSap();

                ele.setIntrow(tableExport.getString("INTROW"));
                ele.setImporte(tableExport.getString("IMPORTE"));
                ele.setError(tableExport.getString("ERROR"));
                ele.setEbeln(tableExport.getString("EBELN"));
                ele.setPosicion(tableExport.getString("POSICION"));
                ele.setPacno(tableExport.getString("PACNO"));
                ele.setCentro(tableExport.getString("CENTRO"));
                ele.setOcurrencia(tableExport.getString("OCURRENCIA"));
                ele.setEntrega(tableExport.getString("ENTREGA"));
                ele.setRmprv(tableExport.getString("RMPRV"));
                ele.setState(tableExport.getString("STATE"));
                ele.setMnd(tableExport.getString("MND"));
                ele.setType(tableExport.getString("TYPE"));
                lista.add(ele);

            }
            log.error("crearHes_____10");

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            remito.setCentro(error);
            lista.add(remito);
            log.error("crearHes_____11");
            // lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            remito.setCentro(error);
            lista.add(remito);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
            log.error("crearHes_____12");
        }

        return lista;

    }

    @Override
    public List<TextClaseDocSap> listaClaseDocumentos() {
        List<TextClaseDocSap> lista = new ArrayList<TextClaseDocSap>();
        TextClaseDocSap claseDoc = new TextClaseDocSap();
        List<MtrClaseDocumento> listaDoc = this.mtrClaseDocumentoDeltaRepository.findAll();

        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_CLASE_DOCS_COMP");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            //JCoTable tableImport = imports.getTable("IT_TCERT");

            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExport = exports.getTable("T_T161T");
            //Recuperar datos de salida
            for (int i = 0; i < tableExport.getNumRows(); i++) {

                tableExport.setRow(i);
                Optional<MtrClaseDocumento> optionalClaseDoc = listaDoc.stream()
                        .filter(x -> tableExport.getString("BSART").equalsIgnoreCase(x.getCodigoSap()))
                        .findFirst();
                MtrClaseDocumento claDoc = new MtrClaseDocumento();
                if (optionalClaseDoc.isPresent())
                    claDoc = optionalClaseDoc.get();
                TextClaseDocSap ele = new TextClaseDocSap();
                ele.setBatxt(tableExport.getString("BATXT"));
                ele.setBsart(tableExport.getString("BSART"));
                ele.setBstyp(tableExport.getString("BSTYP"));
                ele.setSpras(tableExport.getString("SPRAS"));
                lista.add(ele);
                claDoc.setCodigoSap(tableExport.getString("BSART"));
                claDoc.setDescripcion(tableExport.getString("BATXT"));
                claDoc.setEstado("1");
                this.mtrClaseDocumentoDeltaRepository.save(claDoc);
            }


        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            claseDoc.setBatxt(error);
            lista.add(claseDoc);
            // lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            claseDoc.setBatxt(error);
            lista.add(claseDoc);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        }

        return lista;
    }

    @Override
    public List<CentroSap> listaCentroSap(String bukrs) {
        List<CentroSap> lista = new ArrayList<CentroSap>();
        CentroSap centro = new CentroSap();
        List<MtrCentroAlmacen> listaCentro = this.mtrCentroAlmacenDeltaRepository.findAll();
        List<MtrSociedad> listaSociedad = this.mtrSociedadDeltaRepository.findAll();

        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_LISTA_CENTRO");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            //JCoTable tableImport = imports.getTable("IT_TCERT");
            imports.setValue("PI_BUKRS", bukrs);
            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExport = exports.getTable("TO_CENTRO");
            //Recuperar datos de salida
            for (int i = 0; i < tableExport.getNumRows(); i++) {

                tableExport.setRow(i);

                Optional<MtrSociedad> optionalSociedad = listaSociedad.stream()
                        .filter(x -> bukrs.equalsIgnoreCase(x.getDescBrv()))
                        .findFirst();
                if(optionalSociedad.isPresent()) {

                    Optional<MtrCentroAlmacen> optionalCentro = listaCentro.stream()
                            .filter(x -> tableExport.getString("WERKS").equalsIgnoreCase(x.getCodigoCentroSap()) && x.getIdPadre() == 0)
                            .findFirst();

                    MtrCentroAlmacen centroAlmacen = new MtrCentroAlmacen();

                    if (optionalCentro.isPresent())
                        centroAlmacen = optionalCentro.get();
                    centroAlmacen.setCodigoCentroSap(tableExport.getString("WERKS"));
                    centroAlmacen.setDescripcion(tableExport.getString("NAME1"));
                    centroAlmacen.setIdPadre(0);
                    centroAlmacen.setMtrSociedad(optionalSociedad.get());

                    CentroSap ele = new CentroSap();
                    ele.setName1(tableExport.getString("NAME1"));
                    ele.setCity2(tableExport.getString("CITY2"));
                    ele.setOrt01(tableExport.getString("ORT01"));
                    ele.setStras(tableExport.getString("STRAS"));
                    ele.setWerks(tableExport.getString("WERKS"));
                    lista.add(ele);

                    //MtrCentroAlmacen centroAlmacen = new MtrCentroAlmacen();
                    //centroAlmacen.setCodigoCentroSap(tableExport.getString("WERKS"));
                    //centroAlmacen.setDescripcion(tableExport.getString("NAME1"));
                    this.mtrCentroAlmacenDeltaRepository.save(centroAlmacen);
                }

            }


        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            centro.setName1(error);
            lista.add(centro);
            // lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            centro.setName1(error);
            lista.add(centro);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        }

        return lista;
    }

    @Override
    public List<CentroAlmacenSap> listaCentroAlmacen(String sociedad) {
        List<CentroAlmacenSap> lista = new ArrayList<CentroAlmacenSap>();
        CentroAlmacenSap centroAlmacen = new CentroAlmacenSap();
        List<MtrCentroAlmacen> listaCentro = this.mtrCentroAlmacenDeltaRepository.findAll();
        List<MtrSociedad> listaSociedad = this.mtrSociedadDeltaRepository.findAll();

        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_LISTA_CENTRO_ALMACEN");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            //JCoTable tableImport = imports.getTable("IT_TCERT");
            imports.setValue("PI_BUKRS", sociedad);
            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExport = exports.getTable("TO_CTRO_ALMCN");
            //Recuperar datos de salida
            for (int i = 0; i < tableExport.getNumRows(); i++) {

                tableExport.setRow(i);
                Optional<MtrSociedad> optionalSociedad = listaSociedad.stream()
                        .filter(x -> tableExport.getString("BUKRS").equalsIgnoreCase(x.getDescBrv()))
                        .findFirst();

                if(optionalSociedad.isPresent()) {
                    Optional<MtrCentroAlmacen> optionalCentroPadre = listaCentro.stream()
                            .filter(x -> tableExport.getString("WERKS").equalsIgnoreCase(x.getCodigoCentroSap()) &&
                                    tableExport.getString("BUKRS").equalsIgnoreCase(x.getMtrSociedad().getDescBrv()) &&
                                    x.getIdPadre() == 0)
                            .findFirst();
                    if (optionalCentroPadre.isPresent()) {
                        MtrCentroAlmacen centroLamacen = new MtrCentroAlmacen();
                        Optional<MtrCentroAlmacen> optionalCentro = listaCentro.stream()
                                .filter(x -> tableExport.getString("LGOBE").equalsIgnoreCase(x.getCodigoCentroSap()) &&
                                        tableExport.getString("LGORT").equalsIgnoreCase(x.getDescripcion()) &&
                                         tableExport.getString("BUKRS").equalsIgnoreCase(x.getMtrSociedad().getDescBrv()) &&
                                        x.getIdPadre() != 0)
                                .findFirst();
                        if (optionalCentro.isPresent())
                            centroLamacen = optionalCentro.get();


                        CentroAlmacenSap ele = new CentroAlmacenSap();
                        ele.setCity2(tableExport.getString("CITY2"));
                        ele.setOrt01(tableExport.getString("ORT01"));
                        ele.setStras(tableExport.getString("STRAS"));
                        ele.setWerks(tableExport.getString("WERKS"));
                        ele.setLgobe(tableExport.getString("LGOBE"));
                        ele.setLgort(tableExport.getString("LGORT"));
                        lista.add(ele);

                        centroLamacen.setMtrSociedad(optionalSociedad.get());
                        centroLamacen.setCodigoCentroSap(tableExport.getString("LGORT"));
                        centroLamacen.setDescripcion(tableExport.getString("LGOBE"));
                        centroLamacen.setIdPadre(optionalCentroPadre.get().getId());
                        this.mtrCentroAlmacenDeltaRepository.save(centroLamacen);
                    }


                }
            }


        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            centroAlmacen.setWerks(error);
            lista.add(centroAlmacen);
            // lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            centroAlmacen.setWerks(error);
            lista.add(centroAlmacen);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        }

        return lista;
    }

    @Override
    public List<MensajeSap> integrarUnidadMedida() {

        List<MensajeSap> lista = new ArrayList<MensajeSap>();
        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_LISTA_UM");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            //JCoTable tableImport = imports.getTable("IT_TCERT");

            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExport = exports.getTable("TO_LIST_UM");
            lista.add(new MensajeSap("S", exports.getString("PO_CODE"), exports.getString("PO_MSJE")));

            //Recuperar datos de salida
            List<MtrUnidadMedida> listaEntity = new ArrayList<MtrUnidadMedida>();
            for (int i = 0; i < tableExport.getNumRows(); i++) {
                tableExport.setRow(i);
                MtrUnidadMedida unidad = this.mtrUnidadMedidaDeltaRepository.findByCodigoSap(tableExport.getString("MSEHI"));
                if (unidad == null)
                    unidad = new MtrUnidadMedida();
                listaEntity.add(unidad);
                unidad.setCodigoSap(tableExport.getString("MSEHI"));
                unidad.setDescripcion(tableExport.getString("MSEHL"));
                this.mtrUnidadMedidaDeltaRepository.save(unidad);
            }
            //Guardar Batch
            //this.mtrUnidadMedidaDeltaRepository.saveAll(listaEntity);

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        }

        return lista;
    }

    @Override
    public List<MensajeSap> integrarGrupoArticulos(String piMatkl) {
        List<MensajeSap> lista = new ArrayList<MensajeSap>();
        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_CONSULTA_GR_ARTICULOS");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            if (piMatkl != null && piMatkl.length() > 0 && !piMatkl.equalsIgnoreCase(""))
                imports.setValue("PI_MATKL", piMatkl);
            //JCoTable tableImport = imports.getTable("IT_TCERT");

            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExport = exports.getTable("TO_GR_ART");
            lista.add(new MensajeSap("S", exports.getString("PO_CODE"), exports.getString("PO_MSJE")));

            //Recuperar datos de salida
            List<MtrGrupoArticulo> listaEntity = new ArrayList<MtrGrupoArticulo>();
            for (int i = 0; i < tableExport.getNumRows(); i++) {
                tableExport.setRow(i);
                MtrGrupoArticulo grupo = this.mtrGrupoArticuloDeltaRepository.findByCodigoSap(tableExport.getString("MATKL"));
                if (grupo == null)
                    grupo = new MtrGrupoArticulo();
                listaEntity.add(grupo);
                grupo.setCodigoSap(tableExport.getString("MATKL"));
                grupo.setDescripcion(tableExport.getString("WGBEZ"));
                //grupo.set
                //this.mtrUnidadMedidaDeltaRepository.save(unidad);
                //this.mtrGrupoArticuloDeltaRepository.save(grupo);
            }
            //Guardar Batch
            this.mtrGrupoArticuloDeltaRepository.saveAll(listaEntity);

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        }

        return lista;
    }

    @Override
    public List<MensajeSap> integrarServicios(String fechaInicial, String fechaFinal) {
        List<MensajeSap> lista = new ArrayList<MensajeSap>();
        java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyy/MM/dd");
        List<MtrUnidadMedida> listaUnidadMedida = mtrUnidadMedidaMapper.getLista(new MtrUnidadMedida());
        List<MtrGrupoArticulo> listaGrupoArticulo = mtrGrupoArticuloMapper.getLista(new MtrGrupoArticulo());
        List<MtrBienServicio> listaServicio = mtrBienServicioMapper.getListaByTipo("S");

        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_LISTA_SERVICIOS");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            JCoStructure struct = imports.getStructure("PI_ERDAT");
            if (!StringUtils.isBlank(fechaInicial) && !StringUtils.isBlank(fechaFinal)) {

                java.util.Date utilDInicio = format.parse(fechaInicial);
                ;
                java.util.Date utilDFin = format.parse(fechaFinal);
                ;

                struct.setValue("SIGN", "I");
                struct.setValue("OPTION", "BT");
                struct.setValue("LOW", utilDInicio);
                struct.setValue("HIGH", utilDFin);
            }

            //JCoTable tableImport = imports.getTable("IT_TCERT");

            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExport = exports.getTable("TO_SERVICIOS");
            lista.add(new MensajeSap("S", exports.getString("PO_CODE"), exports.getString("PO_MSJE")));

            //Recuperar datos de salida
            List<MtrBienServicio> listaEntity = new ArrayList<MtrBienServicio>();
            for (int i = 0; i < tableExport.getNumRows(); i++) {
                tableExport.setRow(i);
                String meins = tableExport.getString("MEINS");
                String codGrupoArticulo = tableExport.getString("MATKL");
                String codServicio = tableExport.getString("ASNUM");
                String descServicio = tableExport.getString("ASKTX");

                //Verificando si ya existe unidad de medida
                Optional<MtrUnidadMedida> optionalMeins = listaUnidadMedida.stream()
                        .filter(x -> meins.equalsIgnoreCase(x.getCodigoSap()))
                        .findFirst();
                if (optionalMeins.isPresent()) {
                    //Verificando si existe grupo de articulo
                    Optional<MtrGrupoArticulo> optionalGrupo = listaGrupoArticulo.stream()
                            .filter(x -> codGrupoArticulo.equalsIgnoreCase(x.getCodigoSap()))
                            .findFirst();
                    if (optionalGrupo.isPresent()) {
                        MtrBienServicio bs = new MtrBienServicio();
                        //validadando si ya existe el servicio
                        Optional<MtrBienServicio> optionalServicio = listaServicio.stream()
                                .filter(x -> codServicio.equalsIgnoreCase(x.getCodigoSap()))
                                .findFirst();
                        if (optionalServicio.isPresent())
                            bs = optionalServicio.get();
                        bs.setCodigoSap(codServicio);
                        bs.setDescripcion(descServicio);
                        bs.setTipoItem("S");
                        bs.setMtrUnidadMedida(optionalMeins.get());
                        bs.setMtrGrupoArticulo(optionalGrupo.get());
                        listaEntity.add(bs);
                    }
                }

            }
            //Guardar Batch
            this.mtrBienServicioDeltaRepository.saveAll(listaEntity);

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        } catch (ParseException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        }

        return lista;
    }

    @Override
    public List<MensajeSap> integrarMateriales(String fechaInicial, String fechaFinal) {
        List<MensajeSap> lista = new ArrayList<MensajeSap>();
        java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyy/MM/dd");
        List<MtrUnidadMedida> listaUnidadMedida = mtrUnidadMedidaMapper.getLista(new MtrUnidadMedida());
        List<MtrGrupoArticulo> listaGrupoArticulo = mtrGrupoArticuloMapper.getLista(new MtrGrupoArticulo());
        List<MtrBienServicio> listaMaterial = mtrBienServicioMapper.getListaByTipo("M");

        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_CONSULTA_MATERIALES");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            JCoStructure struct = imports.getStructure("PI_ERSDA");
            if (!StringUtils.isBlank(fechaInicial) && !StringUtils.isBlank(fechaFinal)) {

                java.util.Date utilDInicio = format.parse(fechaInicial);
                ;
                java.util.Date utilDFin = format.parse(fechaFinal);
                ;

                struct.setValue("SIGN", "I");
                struct.setValue("OPTION", "BT");
                struct.setValue("LOW", utilDInicio);
                struct.setValue("HIGH", utilDFin);
            }

            //JCoTable tableImport = imports.getTable("IT_TCERT");

            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExport = exports.getTable("TO_MATNR");
            lista.add(new MensajeSap("S", exports.getString("PO_CODE"), exports.getString("PO_MSJE")));

            //Recuperar datos de salida
            List<MtrBienServicio> listaEntity = new ArrayList<MtrBienServicio>();
            for (int i = 0; i < tableExport.getNumRows(); i++) {
                tableExport.setRow(i);
                String meins = tableExport.getString("MEINS");
                String codGrupoArticulo = tableExport.getString("MATKL");
                String codMaterial = tableExport.getString("MATNR");
                String descMaterial = tableExport.getString("MAKTX");

                //Verificando si ya existe unidad de medida
                Optional<MtrUnidadMedida> optionalMeins = listaUnidadMedida.stream()
                        .filter(x -> meins.equalsIgnoreCase(x.getCodigoSap()))
                        .findFirst();
                if (optionalMeins.isPresent()) {
                    //Verificando si existe grupo de articulo
                    Optional<MtrGrupoArticulo> optionalGrupo = listaGrupoArticulo.stream()
                            .filter(x -> codGrupoArticulo.equalsIgnoreCase(x.getCodigoSap()))
                            .findFirst();
                    if (optionalGrupo.isPresent()) {
                        MtrBienServicio bs = new MtrBienServicio();
                        //validadando si ya existe el servicio
                        Optional<MtrBienServicio> optionalMaterial = listaMaterial.stream()
                                .filter(x -> codMaterial.equalsIgnoreCase(x.getCodigoSap()))
                                .findFirst();
                        if (optionalMaterial.isPresent())
                            bs = optionalMaterial.get();
                        bs.setCodigoSap(codMaterial);
                        bs.setDescripcion(descMaterial);
                        bs.setTipoItem("M");
                        bs.setMtrUnidadMedida(optionalMeins.get());
                        bs.setMtrGrupoArticulo(optionalGrupo.get());
                        listaEntity.add(bs);
                    }
                }

            }
            //Guardar Batch
            this.mtrBienServicioDeltaRepository.saveAll(listaEntity);

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        } catch (ParseException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        }

        return lista;
    }

    @Override
    public List<MensajeSap> integrarProveedor(String fechaInicial, String fechaFinal, String lifnr) {
        List<MensajeSap> lista = new ArrayList<MensajeSap>();
        java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyy/MM/dd");
        List<MtrProveedor> listaProv = this.mtrProveedorDeltaRepository.findAll();

        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_CONSULTA_PROVEEDOR");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            JCoStructure struct = imports.getStructure("TI_ERDAT");

            if (!StringUtils.isBlank(lifnr))
                imports.setValue("PI_LIFNR", lifnr);

            if (!StringUtils.isBlank(fechaInicial) && !StringUtils.isBlank(fechaFinal)) {

                java.util.Date utilDInicio = format.parse(fechaInicial);
                ;
                java.util.Date utilDFin = format.parse(fechaFinal);
                ;

                struct.setValue("LOW", utilDInicio);
                struct.setValue("HIGH", utilDFin);
                //struct.setValue("LOW",utilDInicio);
                //struct.setValue("HIGH",utilDFin);
            }

            //JCoTable tableImport = imports.getTable("IT_TCERT");

            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoParameterList tables = stfcConnection.getTableParameterList();
            JCoTable tableExport = tables.getTable("ITAB_LFA1");
            lista.add(new MensajeSap("S", exports.getString("PO_CODE"), exports.getString("PO_MSJE")));

            //Recuperar datos de salida
            List<MtrProveedor> listaEntity = new ArrayList<MtrProveedor>();
            for (int i = 0; i < tableExport.getNumRows(); i++) {
                tableExport.setRow(i);
                String lifnrx = tableExport.getString("LIFNR");
                String razonSocial = tableExport.getString("NAME1");
                String direccion = tableExport.getString("STRAS");
                String ruc = tableExport.getString("STCD1");

                //Verificando si ya existe unidad de medida
                Optional<MtrProveedor> optionalProv = listaProv.stream()
                        .filter(x -> lifnrx.equalsIgnoreCase(x.getLifnr()))
                        .findFirst();
                MtrProveedor proveedor = new MtrProveedor();
                if (optionalProv.isPresent())
                    proveedor = optionalProv.get();

                proveedor.setLifnr(lifnrx);
                proveedor.setDireccion(direccion);
                proveedor.setRazonSocial(razonSocial);
                proveedor.setRuc(ruc);

                listaEntity.add(proveedor);

            }
            //Guardar Batch
            this.mtrProveedorDeltaRepository.saveAll(listaEntity);

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        } catch (ParseException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        }

        return lista;
    }

    @Override
    public List<DescargaServicioSap> listaDescargaDetalle(List<RangeSap> rangeDoc, List<RangeSap> rangeFecha) {
        List<DescargaServicioSap> lista = new ArrayList<DescargaServicioSap>();
        DescargaServicioSap descarga = new DescargaServicioSap();
        //Lista de cabecera detalle
        List<CerNotaPedido> listaOrden = this.cerNotaPedidoDeltaRepository.findAll();
        List<CerNotaPedidoDetalle> listaDetalle = this.cerNotaPedidoDetalleDeltaRepository.findAll();
        List<MtrCentroAlmacen> listaCentro = this.mtrCentroAlmacenDeltaRepository.findAll();
        List<MtrBienServicio> listaBienServicio = this.mtrBienServicioDeltaRepository.findAll();
        List<MtrCuentaImputacion> listaCuentaImputacion = this.mtrCuentaImputacionDeltaRepository.findAll();
        List<MtrCuentaMayor> listaCuentaMayor = this.mtrCuentaMayorDeltaRepository.findAll();
        //List<MtrCentroAlmacen> listaCe

        java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyy/MM/dd");
        java.text.SimpleDateFormat formatOut = new java.text.SimpleDateFormat("yyyyMMdd");

        /*String[] arrAttributesName = new String[]{"EBELN", "EKORG", "LIFNR", "ERNAM", "FIRMAA1", "FIRMAA2", "FIRMAA3", "FIRMAA4",
                "FIRMAB1",
                "FIRMAB2",
                "FIRMAB3",
                "FIRMAB4",
                "WAERS",
                "VIGDES",
                "VIGHAS",
                "TIPDOC",
                "BEDAT",
                "CLDOC",
                "WERKS",
                "NAME1",
                "PEDIDO_VERSION",
                "ZTERM",
                "EBELP",
                "TXZ01",
                "FECENT",
                "PRECIO",
                "KNTTP",
                "LGORT",
                "MATKL",
                "WGBEZ",
                "PACKNO",
                "INTROW",
                "EXTROW",
                "SRVPOS",
                "DESCRI",
                "UNIMED",
                "CANREQ",
                "CANENT",
                //"PRECIO2",
                "SAKTO",
                "KOSTL",
                "POSID",
                "AUFNR",
                "CABTX",
                "ZPLAZO",
                "PRETP"};*/
        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_DESCARGA_DOC_COMPRA");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            JCoTable tableImportDocCompra = imports.getTable("TI_EBELN");
            JCoTable tableImportFechaPedido = imports.getTable("TI_BEDAT");
            //Poblamos Rango documento de compras
            if (rangeDoc != null && rangeDoc.size() > 0) {
                for (RangeSap ele : rangeDoc) {
                    tableImportDocCompra.appendRow();
                    tableImportDocCompra.setValue("SIGN", ele.getSign());
                    tableImportDocCompra.setValue("OPTION", ele.getOption());
                    tableImportDocCompra.setValue("LOW", ele.getLow());
                    tableImportDocCompra.setValue("HIGH", ele.getHigh());
                }
            }
            //Poblamos Rango fecha de pedidos
            if (rangeFecha != null && rangeFecha.size() > 0) {
                for (RangeSap ele : rangeFecha) {
                    tableImportFechaPedido.appendRow();
                    tableImportFechaPedido.setValue("SIGN", ele.getSign());
                    tableImportFechaPedido.setValue("OPTION", ele.getOption());


                    java.util.Date utilDInicio = format.parse(ele.getLow());
                    java.util.Date utilDFin = format.parse(ele.getHigh());

                    tableImportFechaPedido.setValue("LOW", utilDInicio);
                    tableImportFechaPedido.setValue("HIGH", utilDFin);
                }
            }
            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExportDescargaServicio = exports.getTable("TO_DESC_SERV");
            JCoTable tablePos = exports.getTable("TO_TPOS");
            JCoTable tableServ = exports.getTable("TO_TSERV");

            List<DescargaServicioSap> listaBienServioAuxiliar = new ArrayList<DescargaServicioSap>();
            //List<BienServicioCustom> listaMaterialesAux = new ArrayList<BienServicioCustom>();
            //List<BienServicioCustom> listaServicioAux = new ArrayList<BienServicioCustom>();
            /*for (int i = 0; i < tablePos.getNumRows(); i++) {
                //DescargaServicioSap des = new DescargaServicioSap();
                tablePos.setRow(i);
                if(!StringUtils.isBlank(tablePos.getString("MATNR"))) {
                    logger.error("valor material :: " + tablePos.getString("MATNR"));
                    BienServicioCustom bs = new BienServicioCustom();
                    bs.setEbeln(tablePos.getString("EBELN"));
                    bs.setEbelp(tablePos.getString("EBELP"));
                    bs.setExtrow("0000000000");
                    bs.setCodBienServicio(tablePos.getString("MATNR"));
                    bs.setTipo("M");
                    listaBienServioAuxiliar.add(bs);
                }

            }*/

            for (int i = 0; i < tableServ.getNumRows(); i++) {
                //DescargaServicioSap des = new DescargaServicioSap();
                tableServ.setRow(i);
                DescargaServicioSap bs = new DescargaServicioSap();
                bs.setEbeln(tableServ.getString("EBELN"));
                bs.setEbelp(tableServ.getString("EBELP"));
                bs.setExtrow(tableServ.getString("EXTROW"));
                bs.setIntrow(tableServ.getString("INTROW"));
                bs.setCodBienServicio(tableServ.getString("SRVPOS"));
                logger.error(" valor cod servicio :: " + tableServ.getString("SRVPOS"));
                bs.setTipo("S");
                bs.setCanreq(tableServ.getString("CANREQ"));
                bs.setCanent(tableServ.getString("CANENT"));
                bs.setPrecio(tableServ.getString("PRECIO"));
                bs.setTextoAdicional(tableServ.getString("DESCRI"));
                bs.setUnimed(tableServ.getString("UNIMED"));

                //Inicio
                //detalle.setCuentaMayor(tableServ.getString("SAKTO"));
                //detalle.setCeco(tableServ.getString("KOSTL"));
                //detalle.setAfe(tableServ.getString("POSID"));
                //detalle.setOrden(tableServ.getString("AUFNR")	);
                bs.setKnttp(tableServ.getString("KNTTP"));
                bs.setKostl(tableServ.getString("KOSTL"));
                bs.setPosid(tableServ.getString("POSID"));
                bs.setAufnr(tableServ.getString("AUFNR"));
                bs.setSakto(tableServ.getString("SAKTO"));
                //bs.setWerks(tableServ.getString("WERKS"));
                bs.setBurks(tableServ.getString("BUKRS"));
                // listaBienServioAuxiliar
                //Fin

                listaBienServioAuxiliar.add(bs);

            }


            List<CerNotaPedidoDetalle> listaEntity = new ArrayList<CerNotaPedidoDetalle>();
            //Recuperar descarga
            for (int i = 0; i < tablePos.getNumRows(); i++) {

                //tableExportDescargaServicio.setRow(i);
                tablePos.setRow(i);
                DescargaServicioSap descargaDoc = new DescargaServicioSap();

                descargaDoc.setEbeln(tablePos.getString("EBELN"));
                descargaDoc.setEbelp(tablePos.getString("EBELP"));
                descargaDoc.setWerks(tablePos.getString("WERKS"));
                descargaDoc.setExtrow("0000000000");
                descargaDoc.setIntrow("0000000000");
                descargaDoc.setCanreq(tablePos.getString("CANREQ"));
                descargaDoc.setCanent(tablePos.getString("CANENT"));
                descargaDoc.setPrecio(tablePos.getString("PRECIO"));
                descargaDoc.setCodBienServicio(tablePos.getString("MATNR"));
                descargaDoc.setFecent(tablePos.getString("FECENT"));

                /*for (String attributeName : arrAttributesName) {
                    Class<DescargaServicioSap> clazz = DescargaServicioSap.class;
                    Field fieldName = clazz.getDeclaredField(attributeName.toLowerCase());
                    fieldName.setAccessible(true);
                    fieldName.set(descargaDoc, tableExportDescargaServicio.getString(attributeName));

                }*/
                //Setear Valores a la tabla
                logger.error("============================= orden compra detalle" + descargaDoc.getEbelp() + "===================================");
                Optional<CerNotaPedido> optionalPedido = listaOrden.stream()
                        .filter(x -> descargaDoc.getEbeln().equalsIgnoreCase(x.getCodigoNotaPedidoSap()))
                        .findFirst();

                if (optionalPedido.isPresent()) {
                    CerNotaPedido pedido = optionalPedido.get();
                    logger.error("Existe pedido:: " + pedido.getCodigoNotaPedidoSap());
                    Optional<CerNotaPedidoDetalle> optionalDetalle = listaDetalle.stream()
                            .filter(x -> descargaDoc.getEbeln().equalsIgnoreCase(x.getEbeln()) && descargaDoc.getEbelp().equalsIgnoreCase(x.getPosicionSap())
                                    && descargaDoc.getExtrow().equalsIgnoreCase(x.getExtrow()))
                            .findFirst();
                    CerNotaPedidoDetalle detalle = new CerNotaPedidoDetalle();
                    if (optionalDetalle.isPresent())
                        detalle = optionalDetalle.get();
                    Optional<MtrCentroAlmacen> optionalCentro = listaCentro.stream()
                            .filter(x -> descargaDoc.getWerks().equalsIgnoreCase(x.getCodigoCentroSap()) && x.getIdPadre() == 0)
                            .findFirst();
                    if (optionalCentro.isPresent()) {
                        logger.error("Existe centro:: " + optionalCentro.get().getCodigoCentroSap());


                        detalle.setCerNotaPedido(pedido);
                        detalle.setExtrow(descargaDoc.getExtrow());
                        detalle.setIntrow(descargaDoc.getIntrow());
                        detalle.setMtrCentro(optionalCentro.get());
                        detalle.setPosicionSap(descargaDoc.getEbelp());
                        detalle.setEbeln(descargaDoc.getEbeln());
                        //detalle.setUnidadTextoItem(tablePos.getString("UNIMED"));
                        if(!StringUtils.isBlank(tablePos.getString("UNIMED"))) {
                            MtrUnidadMedida unidad = this.mtrUnidadMedidaDeltaRepository.findByCodigoSap(tablePos.getString("UNIMED"));
                            if(unidad != null)
                                detalle.setMtrUnidadMedida(unidad);
                        }

                        //detalle.setCuentaMayor(tablePos.getString("SAKTO"));
                        //detalle.setCeco(tablePos.getString("KOSTL"));
                        //detalle.setAfe(tablePos.getString("POSID"));
                        //detalle.setOrden(tablePos.getString("AUFNR")	);

                        //detalle.setIdPadre(0);
                        log.error("Ingreso cuenta imputacion - mayor :: " + tablePos.getString("KNTTP"));
                        if (!StringUtils.isBlank(tablePos.getString("KNTTP")) && !tablePos.getString("KNTTP").equalsIgnoreCase("U")) {
                            String codeCuentaMayor = tablePos.getString("SAKTO");
                            log.error("Ingreso cuenta imputacion 2 - mayor :: " + codeCuentaMayor);
                            String codeCuentaImputacion = "";
                            if (tablePos.getString("KNTTP").equalsIgnoreCase("K"))
                                codeCuentaImputacion = tablePos.getString("KOSTL");
                            if (tablePos.getString("KNTTP").equalsIgnoreCase("P"))
                                codeCuentaImputacion = tablePos.getString("POSID");
                            if (tablePos.getString("KNTTP").equalsIgnoreCase("F"))
                                codeCuentaImputacion = tablePos.getString("AUFNR");
                            log.error("Ingreso cuenta imputacion 3 - mayor :: " + codeCuentaImputacion);
                            //Guardar imputacion
                            if (!StringUtils.isBlank(codeCuentaImputacion) && !StringUtils.isBlank(tablePos.getString("BUKRS"))) {

                                String finalCodeCuentaImputacion = codeCuentaImputacion;
                                log.error("Ingreso cuenta imputacion 4 - mayor :: " + finalCodeCuentaImputacion);
                                log.error("Ingreso cuenta imputacion 5 - mayor :: " + tablePos.getString("KNTTP") + " - " +  finalCodeCuentaImputacion + " - " + tablePos.getString("BUKRS"));
                                Optional<MtrCuentaImputacion> optionalCuentaImputacion = listaCuentaImputacion.stream()
                                        .filter(x -> tablePos.getString("KNTTP").equalsIgnoreCase(x.getMtrTipoImputacion().getCodigoTipoImputacion()) &&
                                                finalCodeCuentaImputacion.equalsIgnoreCase(x.getCodigoCuentaImputacion()) &&
                                                tablePos.getString("BUKRS").equalsIgnoreCase(x.getMtrSociedad().getDescBrv())).findFirst();
                                if (optionalCuentaImputacion.isPresent())
                                    detalle.setMtrCuentaImputacion(optionalCuentaImputacion.get());
                            }
                            //Guardar cuenta mayor
                            log.error("Ingreso cuenta mayor 6 - mayor :: " + codeCuentaMayor + " - " + tablePos.getString("BUKRS"));
                            if (!StringUtils.isBlank(codeCuentaMayor) && !StringUtils.isBlank(tablePos.getString("BUKRS"))) {
                                log.error("Ingreso cuenta mayor 7 - mayor :: " + tablePos.getString("KNTTP") + " - " + codeCuentaMayor + " - " + tablePos.getString("BUKRS"));
                                Optional<MtrCuentaMayor> optionalCuentaMayor = listaCuentaMayor.stream()
                                        .filter(x -> tablePos.getString("KNTTP").equalsIgnoreCase(x.getMtrTipoImputacion().getCodigoTipoImputacion()) &&
                                                codeCuentaMayor.equalsIgnoreCase(x.getCodigoCuentaMayor()) &&
                                                tablePos.getString("BUKRS").equalsIgnoreCase(x.getMtrSociedad().getDescBrv())).findFirst();
                                if (optionalCuentaMayor.isPresent())
                                    detalle.setMtrCuentaMayor(optionalCuentaMayor.get());
                            }


                        }


                        if (!StringUtils.isBlank(descargaDoc.getCodBienServicio())) {
                            Optional<MtrBienServicio> optionaBsAux = listaBienServicio.stream()
                                    .filter(x -> descargaDoc.getCodBienServicio().equalsIgnoreCase(x.getCodigoSap()) &&
                                            "M".equalsIgnoreCase(x.getTipoItem()))
                                    .findFirst();
                            if (optionaBsAux.isPresent()) {
                                detalle.setMtrBienServicio(optionaBsAux.get());
                            }/*else {
                                        detalle.setTextoAdicional(tablePos.getString("TXZ01"));
                                    }*/
                        } else {
                            detalle.setTextoItem(tablePos.getString("TXZ01"));
                        }

                        BigDecimal cantEntregada = new BigDecimal("0.0");
                        logger.error("descargaDoc.getCanent(): " + descargaDoc.getCanent());
                        //log.error("descargaDoc.getCanent()x: " + descargaDoc.getCanent());
                        if (!StringUtils.isBlank(descargaDoc.getCanent())) {
                            //java.sql.Date sDateEntregada = new java.sql.Date(format.parse(descargaDoc.getCanent()).getTime());
                            cantEntregada = new BigDecimal(descargaDoc.getCanent().trim());

                        }

                        detalle.setCantidadEntregada(cantEntregada);
                        BigDecimal cantidadRequerida = new BigDecimal("0.0");
                        logger.error("descargaDoc.getCanreq(): " + descargaDoc.getCanreq());
                        //log.error("descargaDoc.getCanreq()x: " + descargaDoc.getCanreq());
                        if (!StringUtils.isBlank(descargaDoc.getCanreq()) && descargaDoc.getCanreq() != null) {
                            //java.sql.Date sDateRequerida = new java.sql.Date(format.parse(descargaDoc.getCanreq()).getTime());
                            cantidadRequerida = new BigDecimal(descargaDoc.getCanreq().trim());

                        }
                        detalle.setCantidadRequerida(cantidadRequerida);
                        //detalle.setCerCuentaMayor();
                        logger.error("descargaDoc.getFecent(): " + descargaDoc.getFecent());
                        //log.error("descargaDoc.getFecent()x: " + descargaDoc.getFecent());
                        if (!StringUtils.isBlank(descargaDoc.getFecent()) && !descargaDoc.getFecent().equalsIgnoreCase("00000000")) {
                            java.sql.Date fecent = new java.sql.Date(formatOut.parse(descargaDoc.getFecent().trim()).getTime());
                            detalle.setFechaEntrega(fecent);
                        }
                        logger.error("NFECENT : " + tablePos.getString("NFECENT"));
                        if(!StringUtils.isBlank(tablePos.getString("NFECENT")) && !tablePos.getString("NFECENT").trim().equalsIgnoreCase("00000000")) {
                            java.sql.Date fecentx = new java.sql.Date(formatOut.parse(tablePos.getString("NFECENT").trim()).getTime());
                            detalle.setNuevaFechaEntrega(fecentx);
                        }
                        logger.error("PLIFZ : " + tablePos.getString("PLIFZ"));
                        if(!StringUtils.isBlank(tablePos.getString("PLIFZ"))) {
                            detalle.setPlazoEntrega(tablePos.getString("PLIFZ").trim());
                        }

                        logger.error("descargaDoc.getPrecio(): " + descargaDoc.getPrecio());
                        //log.error("descargaDoc.getPrecio()x: " + descargaDoc.getPrecio());
                        BigDecimal precio = new BigDecimal("0.0");
                        if (!StringUtils.isBlank(descargaDoc.getPrecio())) {
                            precio = new BigDecimal(descargaDoc.getPrecio().trim());

                        }
                        detalle.setPrecioUnitario(precio);
                        CerNotaPedidoDetalle detalleOut = this.cerNotaPedidoDetalleDeltaRepository.save(detalle);
                        //listaEntity.add(detalle);
                        //detalle.setMtrAlmacen();
                        //detalle.setMtrBienServicio();
                        //detalle.setMtrCentro();
                        for (DescargaServicioSap servicio : listaBienServioAuxiliar) {
                            if (servicio.getEbeln().equalsIgnoreCase(descargaDoc.getEbeln()) &&
                                    servicio.getEbelp().equalsIgnoreCase(descargaDoc.getEbelp())) {

                                Optional<CerNotaPedidoDetalle> optionalServicio = listaDetalle.stream()
                                        .filter(x -> servicio.getEbeln().equalsIgnoreCase(x.getEbeln()) && servicio.getEbelp().equalsIgnoreCase(x.getPosicionSap())
                                                && servicio.getExtrow().equalsIgnoreCase(x.getExtrow()))
                                        .findFirst();
                                CerNotaPedidoDetalle detalleServicio = new CerNotaPedidoDetalle();
                                if (optionalServicio.isPresent())
                                    detalleServicio = optionalServicio.get();

                                detalleServicio.setCerNotaPedido(pedido);
                                detalleServicio.setMtrCentro(optionalCentro.get());
                                detalleServicio.setPosicionSap(servicio.getEbelp());
                                detalleServicio.setEbeln(servicio.getEbeln());
                                detalleServicio.setExtrow(servicio.getExtrow());
                                detalleServicio.setIntrow(servicio.getIntrow());
                                detalleServicio.setIdPadre(detalleOut.getId());
                                detalleServicio.setUnidadTextoItem(servicio.getUnimed());

                                //Datos para detalle de psocicion
                                if (!StringUtils.isBlank(servicio.getKnttp()) && !servicio.getKnttp().equalsIgnoreCase("U")) {
                                    String codeCuentaMayor = servicio.getSakto();
                                    String codeCuentaImputacion = "";
                                    if (servicio.getKnttp().equalsIgnoreCase("K"))
                                        codeCuentaImputacion = servicio.getKostl();
                                    if (servicio.getKnttp().equalsIgnoreCase("P"))
                                        codeCuentaImputacion = servicio.getPosid();
                                    if (servicio.getKnttp().equalsIgnoreCase("F"))
                                        codeCuentaImputacion = servicio.getAufnr();
                                    //Guardar imputacion
                                    if (!StringUtils.isBlank(codeCuentaImputacion) && !StringUtils.isBlank(servicio.getBurks())) {
                                        String finalCodeCuentaImputacion = codeCuentaImputacion;
                                        Optional<MtrCuentaImputacion> optionalCuentaImputacion = listaCuentaImputacion.stream()
                                                .filter(x -> servicio.getKnttp().equalsIgnoreCase(x.getMtrTipoImputacion().getCodigoTipoImputacion()) &&
                                                        finalCodeCuentaImputacion.equalsIgnoreCase(x.getCodigoCuentaImputacion()) &&
                                                        servicio.getBurks().equalsIgnoreCase(x.getMtrSociedad().getDescBrv())).findFirst();
                                        if (optionalCuentaImputacion.isPresent())
                                            detalleServicio.setMtrCuentaImputacion(optionalCuentaImputacion.get());
                                    }
                                    //Guardar cuenta mayor
                                    if (!StringUtils.isBlank(codeCuentaMayor) && !StringUtils.isBlank(servicio.getBurks())) {

                                        Optional<MtrCuentaMayor> optionalCuentaMayor = listaCuentaMayor.stream()
                                                .filter(x -> servicio.getKnttp().equalsIgnoreCase(x.getMtrTipoImputacion().getCodigoTipoImputacion()) &&
                                                        codeCuentaMayor.equalsIgnoreCase(x.getCodigoCuentaMayor()) &&
                                                        servicio.getBurks().equalsIgnoreCase(x.getMtrSociedad().getDescBrv())).findFirst();
                                        if (optionalCuentaMayor.isPresent())
                                            detalleServicio.setMtrCuentaMayor(optionalCuentaMayor.get());
                                    }


                                }
                                //Fin

                                if (!StringUtils.isBlank(servicio.getCodBienServicio())) {
                                    Optional<MtrBienServicio> optionaBsServicioAux = listaBienServicio.stream()
                                            .filter(x -> servicio.getCodBienServicio().equalsIgnoreCase(x.getCodigoSap()) &&
                                                    "S".equalsIgnoreCase(x.getTipoItem()))
                                            .findFirst();
                                    if (optionaBsServicioAux.isPresent()) {
                                        detalleServicio.setMtrBienServicio(optionaBsServicioAux.get());
                                    }/*else {
                                        detalle.setTextoAdicional(tablePos.getString("TXZ01"));
                                    }*/
                                } else {
                                    detalleServicio.setTextoItem(servicio.getTextoAdicional());
                                }

                                //Cantifdades y precios
                                BigDecimal cantEntregadaServicio = new BigDecimal("0.0");
                                logger.error("servicio.getCanent() 2: " + servicio.getCanent());

                                if (!StringUtils.isBlank(servicio.getCanent())) {
                                    //java.sql.Date sDateEntregada = new java.sql.Date(format.parse(descargaDoc.getCanent()).getTime());
                                    cantEntregadaServicio = new BigDecimal(servicio.getCanent().trim());

                                }

                                detalleServicio.setCantidadEntregada(cantEntregadaServicio);

                                BigDecimal cantidadRequeridaServicio = new BigDecimal("0.0");
                                logger.error("servicio.getCanreq() 2: " + servicio.getCanreq());

                                if (!StringUtils.isBlank(servicio.getCanreq()) && servicio.getCanreq() != null) {
                                    //java.sql.Date sDateRequerida = new java.sql.Date(format.parse(descargaDoc.getCanreq()).getTime());
                                    cantidadRequeridaServicio = new BigDecimal(servicio.getCanreq().trim());

                                }
                                detalleServicio.setCantidadRequerida(cantidadRequeridaServicio);
                                //detalle.setCerCuentaMayor();
                                logger.error("servicio.getFecent() 2: " + servicio.getFecent());

                                if (!StringUtils.isBlank(descargaDoc.getFecent()) && !descargaDoc.getFecent().equalsIgnoreCase("00000000")) {
                                    java.sql.Date fecent = new java.sql.Date(formatOut.parse(descargaDoc.getFecent().trim()).getTime());
                                    detalleServicio.setFechaEntrega(fecent);
                                }
                                logger.error("servicio.getPrecio() 2: " + servicio.getPrecio());

                                BigDecimal precioServicio = new BigDecimal("0.0");
                                if (!StringUtils.isBlank(servicio.getPrecio())) {
                                    precioServicio = new BigDecimal(servicio.getPrecio().trim());

                                }
                                detalleServicio.setPrecioUnitario(precioServicio);
                                //listaEntity.add(detalleServicio);
                                this.cerNotaPedidoDetalleDeltaRepository.save(detalleServicio);

                            }
                        }


                        //Cargar Hijos

                        if (i < 100)
                            lista.add(descargaDoc);


                        //}

                    }
                }


            }
            //this.cerNotaPedidoDetalleDeltaRepository.saveAll(listaEntity);

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
            // lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (ParseException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
        }

        return lista;

    }

    @Override
    public MensajeSap integrarAprobadores() {
        List<MtrAprobador> listaAprobador = this.mtrAprobadorDeltaRepository.findAll();
        MensajeSap msg = new MensajeSap("S", "S", "La integracion se realiz√≥ correctamente");
        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_USR_APROBADORES");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            //JCoTable tableImport = imports.getTable("IT_TCERT");

            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExport = exports.getTable("T_USRAPROB");
            //Recuperar datos de salida
            for (int i = 0; i < tableExport.getNumRows(); i++) {

                tableExport.setRow(i);
                Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                        .filter(x -> tableExport.getString("TITULAR").equalsIgnoreCase(x.getAprobadorSap()))
                        .findFirst();
                MtrAprobador aprobador = new MtrAprobador();
                if (optionalAprobador.isPresent())
                    aprobador = optionalAprobador.get();
                aprobador.setEstado("1");
                aprobador.setAprobadorSap(tableExport.getString("TITULAR"));
                aprobador.setApellidos(tableExport.getString("APELLIDO"));
                aprobador.setNombre(tableExport.getString("NOMBRE"));
                aprobador.setEmail(tableExport.getString("MAIL"));

                this.mtrAprobadorDeltaRepository.save(aprobador);
            }


        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            msg = new MensajeSap("E", "E", e.toString());
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            msg = new MensajeSap("E", "E", e.toString());
        }

        return msg;
    }

    @Override
    public List<DescargaServicioSap> integraTextosPedido(List<RangeSap> rangeDoc, List<RangeSap> rangeFecha) {
        List<DescargaServicioSap> lista = new ArrayList<DescargaServicioSap>();
        DescargaServicioSap descarga = new DescargaServicioSap();
        List<CerNotaPedido> listaOrden = this.cerNotaPedidoDeltaRepository.findAll();
        java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyy/MM/dd");
        java.text.SimpleDateFormat formatOut = new java.text.SimpleDateFormat("yyyyMMdd");

        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_DESCARGA_DOC_COMPRA");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            JCoTable tableImportDocCompra = imports.getTable("TI_EBELN");
            JCoTable tableImportFechaPedido = imports.getTable("TI_BEDAT");
            //Poblamos Rango documento de compras
            if (rangeDoc != null && rangeDoc.size() > 0) {
                for (RangeSap ele : rangeDoc) {
                    tableImportDocCompra.appendRow();
                    tableImportDocCompra.setValue("SIGN", ele.getSign());
                    tableImportDocCompra.setValue("OPTION", ele.getOption());
                    tableImportDocCompra.setValue("LOW", ele.getLow());
                    tableImportDocCompra.setValue("HIGH", ele.getHigh());
                }
            }
            //Poblamos Rango fecha de pedidos
            if (rangeFecha != null && rangeFecha.size() > 0) {
                for (RangeSap ele : rangeFecha) {
                    tableImportFechaPedido.appendRow();
                    tableImportFechaPedido.setValue("SIGN", ele.getSign());
                    tableImportFechaPedido.setValue("OPTION", ele.getOption());


                    java.util.Date utilDInicio = format.parse(ele.getLow());
                    java.util.Date utilDFin = format.parse(ele.getHigh());

                    tableImportFechaPedido.setValue("LOW", utilDInicio);
                    tableImportFechaPedido.setValue("HIGH", utilDFin);
                }
            }
            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExportDescargaServicio = exports.getTable("TO_TCAB");
            JCoTable tableTexto = exports.getTable("TO_TEXT_CAB");
            List<DescargaServicioSap> listaTextoAuxiliar = new ArrayList<DescargaServicioSap>();
            for (int i = 0; i < tableTexto.getNumRows(); i++) {
                //DescargaServicioSap des = new DescargaServicioSap();
                tableTexto.setRow(i);
                DescargaServicioSap bs = new DescargaServicioSap();
                bs.setEbeln(tableTexto.getString("PO_NUMBER"));
                bs.setIdText(tableTexto.getString("ID"));
                bs.setTdLine(tableTexto.getString("TDLINE"));
                //bs.setUnimed();
                //UNIMED
                //bs.set n/av

                listaTextoAuxiliar.add(bs);

            }

            String breakLine = System.lineSeparator();
            List<CerNotaPedido> listaEntity = new ArrayList<CerNotaPedido>();
            //Recuperar descarga
            String ebelnAux = "XYZ";
            for (int i = 0; i < tableExportDescargaServicio.getNumRows(); i++) {
                tableExportDescargaServicio.setRow(i);
                Optional<CerNotaPedido> optionalPedido = listaOrden.stream()
                        .filter(x -> tableExportDescargaServicio.getString("EBELN").equalsIgnoreCase(x.getCodigoNotaPedidoSap()))
                        .findFirst();
                if (optionalPedido.isPresent()) {
                    CerNotaPedido pedido = optionalPedido.get();
                    String tnotasAclaratorias = "";
                    String tlugarPago = "";
                    String tformaPago = "";
                    String tdocParticulares = "";
                    String tconcepto = "";
                    for (DescargaServicioSap ele : listaTextoAuxiliar) {
                        //tconcepto
                        if (pedido.getCodigoNotaPedidoSap().equalsIgnoreCase(ele.getEbeln())) {
                            if (ele.getIdText().equalsIgnoreCase("F01") || ele.getIdText().equalsIgnoreCase("K01")) {
                                tconcepto = tconcepto + ele.getTdLine();
                                tconcepto = tconcepto + breakLine;
                            }
                        }
                        //Notas aclaratorias
                        if (pedido.getCodigoNotaPedidoSap().equalsIgnoreCase(ele.getEbeln())) {
                            if (ele.getIdText().equalsIgnoreCase("F02") || ele.getIdText().equalsIgnoreCase("K08")) {
                                tnotasAclaratorias = tnotasAclaratorias + ele.getTdLine();
                                tnotasAclaratorias = tnotasAclaratorias + breakLine;
                            }
                        }
                        //Lugar y forma de entrega
                        if (pedido.getCodigoNotaPedidoSap().equalsIgnoreCase(ele.getEbeln())) {
                            if (ele.getIdText().equalsIgnoreCase("F05") || ele.getIdText().equalsIgnoreCase("K05")) {
                                tlugarPago = tlugarPago + ele.getTdLine();
                                tlugarPago = tlugarPago + breakLine;
                            }
                        }
                        //Forma de pago
                        if (pedido.getCodigoNotaPedidoSap().equalsIgnoreCase(ele.getEbeln())) {
                            if (ele.getIdText().equalsIgnoreCase("F07") || ele.getIdText().equalsIgnoreCase("K07")) {
                                tformaPago = tformaPago + ele.getTdLine();
                                tformaPago = tformaPago + breakLine;
                            }
                        }
                        //Documentos de aplicacion
                        if (pedido.getCodigoNotaPedidoSap().equalsIgnoreCase(ele.getEbeln())) {
                            if (ele.getIdText().equalsIgnoreCase("F20")) {
                                tdocParticulares = tdocParticulares + ele.getTdLine();
                                tdocParticulares = tdocParticulares + breakLine;
                            }
                        }

                    }
                    pedido.setTconcepto(tconcepto.trim());
                    pedido.setTdocParticulares(tdocParticulares.trim());
                    pedido.setTlugarPago(tlugarPago.trim());
                    pedido.setTformaPago(tformaPago.trim());
                    pedido.setTnotasAclaratorias(tnotasAclaratorias.trim());
                    pedido.setConcepto(tconcepto.trim());
                    //actualizar
                    this.cerNotaPedidoDeltaRepository.save(pedido);
                    if (i < 100) {
                        DescargaServicioSap descargaDoc = new DescargaServicioSap();
                        descargaDoc.setEbeln(tableExportDescargaServicio.getString("EBELN"));
                        lista.add(descargaDoc);
                    }


                }


            }
            //this.cerNotaPedidoDeltaRepository.saveAll(listaEntity);

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
            // lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (ParseException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
        }

        return lista;
    }

    @Override
    public List<MensajeSap> integrarCuentaImputacion(Integer rangoMenor, Integer rangoMayor, String tipoImputacion, String codigoSap) {
        List<MensajeSap> lista = new ArrayList<MensajeSap>();
        List<MtrSociedad> listaSociedad = this.mtrSociedadDeltaRepository.findAll();
        List<MtrTipoImputacion> listaTipo = this.mtrTipoImputacionDeltaRepository.findAll();
        List<MtrCuentaImputacion> listaCuenta = this.mtrCuentaImputacionDeltaRepository.findAll();
        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_CTA_IMPUTACION");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            if (rangoMenor != null && rangoMenor > 0 && rangoMayor != null && rangoMayor > 0) {
                imports.setValue("I_INICIO", rangoMenor);
                imports.setValue("I_FIN", rangoMayor);
            }
            imports.setValue("I_TIPO", tipoImputacion);
            imports.setValue("I_AUFNR", codigoSap);
            imports.setValue("I_KOSTL", codigoSap);
            imports.setValue("I_POSID", codigoSap);

            //JCoTable tableImport = imports.getTable("IT_TCERT");

            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExport = exports.getTable("OT_CTAIMPUTA");


            //Recuperar datos de salida
            //List<MtrGrupoArticulo> listaEntity = new ArrayList<MtrGrupoArticulo>();
            for (int i = 0; i < tableExport.getNumRows(); i++) {
                tableExport.setRow(i);
                log.error("Cuenta imputacion 1:  " + tableExport.getString("BUKRS"));
                Optional<MtrSociedad> optionalSociedad = listaSociedad.stream()
                        .filter(x -> tableExport.getString("BUKRS").equalsIgnoreCase(x.getDescBrv()))
                        .findFirst();
                if (optionalSociedad.isPresent()) {
                    log.error("Cuenta imputacion 2:  " + tableExport.getString("KNTTP"));
                    Optional<MtrTipoImputacion> optionalTipoImputacion = listaTipo.stream()
                            .filter(x -> tableExport.getString("KNTTP").equalsIgnoreCase(x.getCodigoTipoImputacion()))
                            .findFirst();
                    if (optionalTipoImputacion.isPresent()) {
                        log.error("Cuenta imputacion 3:  " + optionalSociedad.get().getDescBrv() + " - " + optionalTipoImputacion.get().getCodigoTipoImputacion() + " - " + tableExport.getString("SAKNR"));
                        Optional<MtrCuentaImputacion> optionalCuentaImputacion = listaCuenta.stream()
                                .filter(x -> optionalSociedad.get().getDescBrv().equalsIgnoreCase(x.getMtrSociedad().getDescBrv()) &&
                                        optionalTipoImputacion.get().getCodigoTipoImputacion().equalsIgnoreCase(x.getMtrTipoImputacion().getCodigoTipoImputacion()) &&
                                        tableExport.getString("SAKNR").equalsIgnoreCase(x.getCodigoCuentaImputacion()))
                                .findFirst();

                        MtrCuentaImputacion cuenta = new MtrCuentaImputacion();
                        if (optionalCuentaImputacion.isPresent())
                            cuenta = optionalCuentaImputacion.get();
                        cuenta.setCodigoCuentaImputacion(tableExport.getString("SAKNR"));
                        cuenta.setMtrSociedad(optionalSociedad.get());
                        cuenta.setMtrTipoImputacion(optionalTipoImputacion.get());
                        cuenta.setDescripcion(tableExport.getString("MCTXT"));
                        this.mtrCuentaImputacionDeltaRepository.save(cuenta);
                    }
                }
            }
            lista.add(new MensajeSap("S", "", "Las cuentas se actualizaron correctamente"));
            //Guardar Batch
            //this.mtrGrupoArticuloDeltaRepository.saveAll(listaEntity);

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        }

        return lista;
    }

    @Override
    public List<MensajeSap> integrarCuentaMayor(Integer rangoMenor, Integer rangoMayor ,  String codigoSap) {
        List<MensajeSap> lista = new ArrayList<MensajeSap>();
        List<MtrSociedad> listaSociedad = this.mtrSociedadDeltaRepository.findAll();
        List<MtrTipoImputacion> listaTipo = this.mtrTipoImputacionDeltaRepository.findAll();
        List<MtrCuentaMayor> listaCuenta = this.mtrCuentaMayorDeltaRepository.findAll();
        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_CTA_MAYOR");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            if (rangoMenor != null && rangoMenor > 0 && rangoMayor != null && rangoMayor > 0) {
                imports.setValue("I_INICIO", rangoMenor);
                imports.setValue("I_FIN", rangoMayor);
            }
            imports.setValue("I_SAKNR", codigoSap);
            //JCoTable tableImport = imports.getTable("IT_TCERT");

            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExport = exports.getTable("OT_CTAIMPUTA");


            //Recuperar datos de salida
            //List<MtrGrupoArticulo> listaEntity = new ArrayList<MtrGrupoArticulo>();
            for (int i = 0; i < tableExport.getNumRows(); i++) {
                tableExport.setRow(i);
                log.error("Cuenta mayor :: " + tableExport.getString("BUKRS"));
                Optional<MtrSociedad> optionalSociedad = listaSociedad.stream()
                        .filter(x -> tableExport.getString("BUKRS").equalsIgnoreCase(x.getDescBrv()))
                        .findFirst();
                if (optionalSociedad.isPresent()) {
                    log.error("Cuenta mayor 2 :: " + tableExport.getString("KNTTP"));
                    Optional<MtrTipoImputacion> optionalTipoImputacion = listaTipo.stream()
                            .filter(x -> tableExport.getString("KNTTP").equalsIgnoreCase(x.getCodigoTipoImputacion()))
                            .findFirst();
                    if (optionalTipoImputacion.isPresent()) {
                        log.error("Cuenta mayor 3 :: " + optionalSociedad.get().getDescBrv() + " - " + optionalTipoImputacion.get().getCodigoTipoImputacion() + " - " + tableExport.getString("SAKNR"));
                        Optional<MtrCuentaMayor> optionalCuentaMayor = listaCuenta.stream()
                                .filter(x -> optionalSociedad.get().getDescBrv().equalsIgnoreCase(x.getMtrSociedad().getDescBrv()) &&
                                        optionalTipoImputacion.get().getCodigoTipoImputacion().equalsIgnoreCase(x.getMtrTipoImputacion().getCodigoTipoImputacion()) &&
                                        tableExport.getString("SAKNR").equalsIgnoreCase(x.getCodigoCuentaMayor()))
                                .findFirst();
                        MtrCuentaMayor cuenta = new MtrCuentaMayor();
                        if (optionalCuentaMayor.isPresent())
                            cuenta = optionalCuentaMayor.get();
                        cuenta.setCodigoCuentaMayor(tableExport.getString("SAKNR"));
                        cuenta.setMtrSociedad(optionalSociedad.get());
                        cuenta.setMtrTipoImputacion(optionalTipoImputacion.get());
                        cuenta.setDescripcion(tableExport.getString("MCTXT"));
                        this.mtrCuentaMayorDeltaRepository.save(cuenta);
                    }
                }
            }
            lista.add(new MensajeSap("S", "", "Las cuentas se actualizaron correctamente"));
            //Guardar Batch
            //this.mtrGrupoArticuloDeltaRepository.saveAll(listaEntity);

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        }

        return lista;
    }

}

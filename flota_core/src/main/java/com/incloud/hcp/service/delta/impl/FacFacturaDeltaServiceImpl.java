/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 *
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntitydeltaDTOService.java.e.vm
 */
package com.incloud.hcp.service.delta.impl;

import com.ibm.icu.text.SimpleDateFormat;
import com.incloud.hcp._security.SystemLoggedUser;
import com.incloud.hcp._security.UserSession;
import com.incloud.hcp.cmis.CmisFile;
import com.incloud.hcp.domain.*;
import com.incloud.hcp.domain.response.FacFacturaResponse;
import com.incloud.hcp.enums.EstadoFacturaEnum;
import com.incloud.hcp.enums.TipoFacturaAdjuntoEnum;
import com.incloud.hcp.repository.FacFacturaRepository;
import com.incloud.hcp.repository.delta.*;
import com.incloud.hcp.service._framework.cmis.CmisService;
import com.incloud.hcp.service.delta.AppParametriaDeltaService;
import com.incloud.hcp.service.delta.FacDocumentoAdjuntoDeltaService;
import com.incloud.hcp.service.delta.FacFacturaDeltaService;
import com.incloud.hcp.service.delta.FacHistorialDeltaService;
import com.incloud.hcp.service.dto.DatosProveedorSunatDto;
import com.incloud.hcp.service.dto.FacFacturaDto;
import com.incloud.hcp.service.impl.FacFacturaServiceImpl;
import com.incloud.hcp.service.notificacion.FacturaCreacionModificacionNotificacion;
import com.incloud.hcp.service.notificacion.MailSetting;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.service.support.PageResponse;
import com.incloud.hcp.utils.Constants;
import com.incloud.hcp.utils.DateUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.ss.usermodel.Cell;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import javax.persistence.criteria.*;
import java.math.BigDecimal;
import java.util.*;

/**
 * A simple DTO Facility for FacFactura.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public class FacFacturaDeltaServiceImpl extends FacFacturaServiceImpl implements FacFacturaDeltaService {

    @Autowired
    private FacFacturaRepository facFacturaRepository;

    @Autowired
    private FacFacturaCertificadoDeltaRepository facFacturaCertificadoDeltaRepository;

    @Autowired
    private FacDocumentoAdjuntoDeltaRepository facDocumentoAdjuntoDeltaRepository;

    @Autowired
    private FacDocumentoAdjuntoDeltaService facDocumentoAdjuntoDeltaService;

    @Autowired
    private FacImputacionDeltaRepository facImputacionDeltaRepository;

    @Autowired
    private FacAprobadorDeltaRepository facAprobadorDeltaRepository;

    @Autowired
    private FacContactoDeltaRepository facContactoDeltaRepository;

    @Autowired
    private FacHistorialDeltaRepository facHistorialDeltaRepository;

    @Autowired
    private FacHistorialDeltaService facHistorialDeltaService;

    @Autowired
    private CmisService cmisService;

    @Autowired
    private SystemLoggedUser systemLoggedUser;

    @Autowired
    private AppParametriaDeltaService appParametriaDeltaService;

    @Autowired
    private FacturaCreacionModificacionNotificacion facturaCreacionModificacionNotificacion;

    @Autowired
    private CerCertificadoDeltaRepository cerCertificadoDeltaRepository;

    @Autowired
    private RestTemplate restTemplate;

    //SMTP Values
    @Value("${spring.mail.username}")
    private String username;
    @Value("${spring.mail.password}")
    private String password;
    @Value("${spring.mail.host}")
    private String host;
    @Value("${spring.mail.port}")
    private String port;

    private BigDecimal INTERVALO_PORCENTAJE_MAXIMO = new BigDecimal(1.01);
    private BigDecimal INTERVALO_PORCENTAJE_MINIMO = new BigDecimal(0.99);


    /**************************/
    /* Metodos Personalizados */
    /**************************/

    public DatosProveedorSunatDto devuelveDatosProveedorSunat(String ruc) throws Exception {
        String uri = "http://52.1.149.78:89/sunat/Api/contribuyentes/" + ruc;
        DatosProveedorSunatDto result = this.restTemplate.getForObject(uri, DatosProveedorSunatDto.class);
        return result;
    }

    public FacDocumentoAdjunto agregarAdjuntoTemporal(MultipartFile file, String tipoAdjuntoFactura) throws Exception {

        if (this.appParametriaDeltaService.devuelveApagarCertificado()) {
            throw new Exception(Constants.MENSAJE_SISTEMA_APAGADO);
        }
        FacDocumentoAdjunto facDocumentoAdjunto = new FacDocumentoAdjunto();
        log.error("agregarAdjunto 00 file: " + file.toString());
        UserSession user = this.systemLoggedUser.getUserSession();

        String TEMP_DIRECTORY = "COGA-TEMP";
        String folderId = this.cmisService.createFolder(TEMP_DIRECTORY);
        log.debug("agregarAdjunto 01 ---> folderId  [" + folderId + " ]");
        CmisFile cmisFile = cmisService.createOrReplaceDocumento(folderId, file);

        log.error("agregarAdjunto 02 ---> cmisFile  [" + cmisFile.toString() + " ]");
        Long current = System.currentTimeMillis();
        int valorCurrent = Math.abs(current.intValue());

        facDocumentoAdjunto.setId(valorCurrent);
        facDocumentoAdjunto.setCarpetaId(folderId);
        facDocumentoAdjunto.setArchivoId(cmisFile.getId());
        facDocumentoAdjunto.setArchivoNombre(cmisFile.getName());
        facDocumentoAdjunto.setRutaCatalogo(cmisFile.getUrl());
        facDocumentoAdjunto.setArchivoTipo(cmisFile.getType());
        facDocumentoAdjunto.setSize(cmisFile.getSize());
        facDocumentoAdjunto.setTipoAdjunto(tipoAdjuntoFactura);

        log.error("agregarAdjunto 03 cerNotaPedidoAdjunto  [" + file.getName() + " , " +
                file.getSize() + " temp directory " + TEMP_DIRECTORY + " ]");

        log.error("agregarDocumentoCerificado 04 facDocumentoAdjunto: " + facDocumentoAdjunto);
        return facDocumentoAdjunto;
    }

    public String deleteAdjunto(String archivoID) throws Exception {
        if (this.appParametriaDeltaService.devuelveApagarCertificado()) {
            throw new Exception(Constants.MENSAJE_SISTEMA_APAGADO);
        }
        //Delete from HANA
        FacDocumentoAdjunto req = new FacDocumentoAdjunto();
        req.setArchivoId(archivoID);
        this.facDocumentoAdjuntoDeltaService.find(req).forEach(e -> {
            this.facDocumentoAdjuntoDeltaRepository.delete(e);
        });

        //Delete form CMIS
        cmisService.deleteFile(archivoID);
        return archivoID;
    }

    public FacFacturaDto devuelveFactura(Integer facFacturaId) throws Exception {
        FacFacturaDto facFacturaDto = new FacFacturaDto();
        FacFactura facFactura = this.facFacturaRepository.getOne(facFacturaId);
        if (!Optional.ofNullable(facFactura).isPresent()) {
            throw new Exception("No se encontr√≥ Factura con ID: " + facFacturaId);
        }
        facFacturaDto.setFacFactura(facFactura);

        List<FacFacturaCertificado> facFacturaCertificadoList =
                this.facFacturaCertificadoDeltaRepository.findByFacFacturaOrderByCerCertificado(facFactura);
        facFacturaDto.setFacFacturaCertificadoList(facFacturaCertificadoList);

        List<FacDocumentoAdjunto> facDocumentoAdjuntoList =
                this.facDocumentoAdjuntoDeltaRepository.findByFacFacturaOrderByTipoAdjunto(facFactura);
        facFacturaDto.setFacDocumentoAdjuntoList(facDocumentoAdjuntoList);
        List<FacDocumentoAdjunto> facDocumentoAdjuntoFacturaList =
                this.facDocumentoAdjuntoDeltaRepository.
                        findByFacFacturaAndTipoAdjunto(facFactura, TipoFacturaAdjuntoEnum.FAC_FACTU.getEstado());
        facFacturaDto.setFacDocumentoAdjuntoFacturaList(facDocumentoAdjuntoFacturaList);
        List<FacDocumentoAdjunto> facDocumentoAdjuntoGuiaList =
                this.facDocumentoAdjuntoDeltaRepository.
                        findByFacFacturaAndTipoAdjunto(facFactura, TipoFacturaAdjuntoEnum.FAC_GUIA.getEstado());
        facFacturaDto.setFacDocumentoAdjuntoGuiaList(facDocumentoAdjuntoGuiaList);
        List<FacDocumentoAdjunto> facDocumentoAdjuntoCdrList =
                this.facDocumentoAdjuntoDeltaRepository.
                        findByFacFacturaAndTipoAdjunto(facFactura, TipoFacturaAdjuntoEnum.FAC_CDR.getEstado());
        facFacturaDto.setFacDocumentoAdjuntoCdrList(facDocumentoAdjuntoCdrList);
        List<FacDocumentoAdjunto> facDocumentoAdjuntoOtrosList =
                this.facDocumentoAdjuntoDeltaRepository.
                        findByFacFacturaAndTipoAdjunto(facFactura, TipoFacturaAdjuntoEnum.FAC_OTROS.getEstado());
        facFacturaDto.setFacDocumentoAdjuntoOtrosList(facDocumentoAdjuntoOtrosList);

        List<FacImputacion> facImputacionList =
                this.facImputacionDeltaRepository.findByFacFacturaOrderByMtrCuentaImputacion(facFactura);
        facFacturaDto.setFacImputacionList(facImputacionList);

        FacHistorial facHistorial = new FacHistorial();
        facHistorial.setFacFactura(facFactura);
        List<FacHistorial> facHistorialList = this.facHistorialDeltaService.find(facHistorial);
        facFacturaDto.setFacHistorialList(facHistorialList);
        return facFacturaDto;
    }

    public void enviarEmailFactura(FacFacturaDto bean) throws Exception {
        MailSetting setting = new MailSetting();
        setting.setEmailFrom(username);
        setting.setPassword(password);
        setting.setHost(host);
        setting.setNameFrom(username);
        setting.setPort(port);
        setting.setUser(username);

        FacFactura facFactura = bean.getFacFactura();
        MtrProveedor proveedor = facFactura.getMtrProveedor();
        proveedor = this.mtrProveedorDeltaRepository.getOne(proveedor.getId());
        int nplantilla = 1;
        if (!bean.isEsNuevaFactura())
            nplantilla = 2;
        this.facturaCreacionModificacionNotificacion.enviar(
                setting,
                proveedor,
                proveedor.getEmailContacto(),
                "",
                facFactura,
                nplantilla,
                1
        );

    }

    public FacFacturaDto grabarFactura(FacFacturaDto bean) throws Exception {
        FacFactura facFactura = bean.getFacFactura();

        UserSession userSession = this.systemLoggedUser.getUserSession();
        boolean esNuevaFactura = true;
        if (Optional.ofNullable(facFactura.getId()).isPresent()) {
            esNuevaFactura = false;
            MtrEstado mtrEstadoActual = facFactura.getMtrEstado();
            if (!mtrEstadoActual.getCodigoEstado().equals(EstadoFacturaEnum.EN_REVISION_CUPA.getEstado())) {
                throw new Exception("No se puede modificar una Factura en estado diferente a EN REVISION CUPA");
            }
        }
        else {
            Date fechaCreacion = DateUtils.obtenerFechaHoraActual();
            facFactura.setFechaCreacion(fechaCreacion);
            FacFactura facturaExiste = this.facFacturaDeltaRepository.verificarExisteNumeroDocumentoFactura(
                    facFactura.getMtrProveedor().getId(),
                    facFactura.getTipoFactura(),
                    facFactura.getSerieFactura(),
                    facFactura.getNumeroFactura()
            );
            if (Optional.ofNullable(facturaExiste).isPresent()) {
                String codigoFactura = facFactura.getTipoFactura() + "-" + facFactura.getSerieFactura() + "-" + facFactura.getNumeroFactura();
                throw new Exception("Factura con c√≥digo "+ codigoFactura + " ya se encuentra registrada!!");
            }
        }
        List<FacFacturaCertificado> facFacturaCertificadoList = bean.getFacFacturaCertificadoList();
        BigDecimal sumaMontoCertificado = new BigDecimal(0.0);
        if (facFacturaCertificadoList != null && facFacturaCertificadoList.size() > 0) {
            int contador=0;
            for(FacFacturaCertificado facFacturaCertificado : facFacturaCertificadoList) {
                Optional<CerCertificado> optionalCerCertificado =
                        this.cerCertificadoDeltaRepository.findById(facFacturaCertificado.getCerCertificado().getId());
                if (!optionalCerCertificado.isPresent()) {
                    throw new Exception("No se encontr√≥ Certificado con ID: " + facFacturaCertificado.getCerCertificado().getId());
                }
                CerCertificado cerCertificado = optionalCerCertificado.get();
                facFacturaCertificado.setCerCertificado(cerCertificado);
                facFacturaCertificadoList.set(contador, facFacturaCertificado);
                contador++;
                BigDecimal montoTotal = cerCertificado.getMontoTotal();
                BigDecimal montoTotalAjustado = cerCertificado.getMontoTotalAdjustado();
                if (montoTotalAjustado.floatValue() > 0) {
                    sumaMontoCertificado = new BigDecimal(sumaMontoCertificado.floatValue() + montoTotalAjustado.floatValue());
                }
                else {
                    sumaMontoCertificado = new BigDecimal(sumaMontoCertificado.floatValue() + montoTotal.floatValue());
                }
            }
        }
        BigDecimal monto = facFactura.getMonto();
        if ((sumaMontoCertificado.floatValue() > monto.floatValue() * INTERVALO_PORCENTAJE_MAXIMO.floatValue()) ||
                (sumaMontoCertificado.floatValue() < monto.floatValue() * INTERVALO_PORCENTAJE_MINIMO.floatValue())
        ) {
            throw new Exception("Verificar Montos - Importes sin IGV vs Suma Monto Certificados no coinciden!!");
        }


        bean.setEsNuevaFactura(esNuevaFactura);
        MtrEstado mtrEstado = this.mtrEstadoDeltaRepository.
                getByCodigoAgrupadoAndCodigoEstado(
                        Constants.CODIGO_AGRUPADO_FACTURA,
                        EstadoFacturaEnum.EN_REVISION_CUPA.getEstado()
                );
        facFactura.setMtrEstado(mtrEstado);

        facFactura.setFechaCreacion(DateUtils.obtenerFechaHoraActual());
        Date fechaEstimacion = DateUtils.obtenerFechaActualPlusMonth(1);
        if (!Optional.ofNullable(facFactura.getFechaEstimadaPago()).isPresent()) {
            facFactura.setFechaEstimadaPago(fechaEstimacion);
        }
        facFactura = this.facFacturaDeltaRepository.save(facFactura);
        bean.setFacFactura(facFactura);

        /* eliminaciones previas */
        List<FacFacturaCertificado> facFacturaCertificadoListActual =
                this.facFacturaCertificadoDeltaRepository.findByFacturaId(facFactura.getId());
        if (facFacturaCertificadoListActual != null && facFacturaCertificadoListActual.size() > 0) {
            this.facFacturaCertificadoDeltaRepository.deleteByFacturaId(facFactura.getId());
        }
        List<FacDocumentoAdjunto> facDocumentoAdjuntoList =
                this.facDocumentoAdjuntoDeltaRepository.findByFacturaId(facFactura.getId());
        if (facDocumentoAdjuntoList != null && facDocumentoAdjuntoList.size() > 0) {
            this.facDocumentoAdjuntoDeltaRepository.deleteByFacturaId(facFactura.getId());
        }
        List<FacImputacion> facImputacionList =
                this.facImputacionDeltaRepository.findByFacturaId(facFactura.getId());
        if (facImputacionList != null && facImputacionList.size() > 0) {
            this.facImputacionDeltaRepository.deleteByFacturaId(facFactura.getId());
        }

//        MtrEstado mtrEstadoCertificado = this.mtrEstadoDeltaRepository.getByCodigoAgrupadoAndCodigoEstado(
//                Constants.CODIGO_AGRUPADO_CERTIFICADO,
//                EstadoCertificadoEnum.FACTURADO.getEstado()
//        );

        /* insertando certificados */
        if (facFacturaCertificadoList != null && facFacturaCertificadoList.size() > 0) {
            int contador = 0;
            for(FacFacturaCertificado facFacturaCertificado : facFacturaCertificadoList) {
                facFacturaCertificado.setEstado(Constants.SI);
                facFacturaCertificado.setFacFactura(facFactura);
                CerCertificado cerCertificado = facFacturaCertificado.getCerCertificado();
                cerCertificado.setIndTieneFactura(Constants.SI);
                //cerCertificado.setMtrEstado(mtrEstadoCertificado);
                this.cerCertificadoDeltaRepository.save(cerCertificado);

                facFacturaCertificado = this.facFacturaCertificadoDeltaRepository.save(facFacturaCertificado);
                facFacturaCertificadoList.set(contador, facFacturaCertificado);
                contador++;
            }
            bean.setFacFacturaCertificadoList(facFacturaCertificadoList);
        }
        else {
            bean.setFacFacturaCertificadoList(null);
        }

        /* insertando adjuntos */
        List<FacDocumentoAdjunto> facDocumentoAdjuntoFacturaList = this.grabarListaAdjunto(
                facFactura,
                TipoFacturaAdjuntoEnum.FAC_FACTU.getEstado(),
                bean.getFacDocumentoAdjuntoFacturaList());
        List<FacDocumentoAdjunto> facDocumentoAdjuntoGuiaList = this.grabarListaAdjunto(
                facFactura,
                TipoFacturaAdjuntoEnum.FAC_GUIA.getEstado(),
                bean.getFacDocumentoAdjuntoGuiaList());
        List<FacDocumentoAdjunto> facDocumentoAdjuntoCdrList = this.grabarListaAdjunto(
                facFactura,
                TipoFacturaAdjuntoEnum.FAC_CDR.getEstado(),
                bean.getFacDocumentoAdjuntoCdrList());
        List<FacDocumentoAdjunto> facDocumentoAdjuntoOtrosList = this.grabarListaAdjunto(
                facFactura,
                TipoFacturaAdjuntoEnum.FAC_OTROS.getEstado(),
                bean.getFacDocumentoAdjuntoOtrosList());
        bean.setFacDocumentoAdjuntoFacturaList(facDocumentoAdjuntoFacturaList);
        bean.setFacDocumentoAdjuntoGuiaList(facDocumentoAdjuntoGuiaList);
        bean.setFacDocumentoAdjuntoCdrList(facDocumentoAdjuntoCdrList);
        bean.setFacDocumentoAdjuntoOtrosList(facDocumentoAdjuntoOtrosList);

        /* insertando imputaciones */
        if (bean.getFacImputacionList() != null && bean.getFacImputacionList().size() > 0) {
            List<FacImputacion> facImputacionListRpta =
                    this.facImputacionDeltaRepository.saveAll(bean.getFacImputacionList());
            bean.setFacImputacionList(facImputacionListRpta);
        }
        else {
            bean.setFacImputacionList(null);
        }

        /* insertando registro en facHistorial */
        String nombre = userSession.getFirstName() + " " + userSession.getLastName();
        FacHistorial facHistorial = new FacHistorial();
        facHistorial.setFacFactura(facFactura);
        facHistorial.setDescripcion("Factura Publicada");
        facHistorial.setMtrEstado(mtrEstado);
        facHistorial.setUsuarioHistorial(nombre);
        facHistorial.setFechaHistorial(DateUtils.obtenerFechaHoraActual());
        facHistorial = this.facHistorialDeltaRepository.save(facHistorial);

        bean.setFacHistorialGenerado(facHistorial);
        return bean;
    }



    private List<FacDocumentoAdjunto> grabarListaAdjunto(
            FacFactura facFactura,
            String tipoAdjunto,
            List<FacDocumentoAdjunto> beanListaAdjunto) throws Exception {
        if (beanListaAdjunto == null || beanListaAdjunto.size() <= 0) {
            return null;
        }

        List<FacDocumentoAdjunto> beanListaAdjuntoRpta = new ArrayList<FacDocumentoAdjunto>();
        log.error("grabarListaAdjunto 02 beanListaAdjunto: (size)" + beanListaAdjunto.size());
        log.error("grabarListaAdjunto 03 beanListaAdjunto: " + beanListaAdjunto.toString());

        String nameFolder = "COGA-FACTURA-" + facFactura.getId();
        log.error("grabarListaAdjunto 04 NOMBRE FOLDER " + nameFolder);

        //is Empty elements attach
        if (beanListaAdjunto != null && beanListaAdjunto.size() > 0) {
            String folderId = cmisService.createFolder(nameFolder);

            //Creo una segunda lista con los adjuntos no guardados -
            List<CmisFile> listAdjuntoNew = new ArrayList<CmisFile>();
            if (beanListaAdjunto.size() > 0) {
                beanListaAdjunto.forEach(item -> {
                    listAdjuntoNew.add(
                            new CmisFile(item.getArchivoId(), item.getArchivoNombre(), item.getRutaCatalogo(), item.getArchivoTipo()));
                });
            }
            log.error("grabarListaAdjunto 06 - listAdjuntoNew: size: " + listAdjuntoNew.size());
            log.error("grabarListaAdjunto 07 - listAdjuntoNew: " + listAdjuntoNew.toString());

            //Se mueven los adjuntos al folder destino y se obtiene la lista de los mismos con su nuevo URL
            Optional<List<CmisFile>> listAdjuntoMove = Optional.ofNullable(listAdjuntoNew)
                    .map(list -> {
                        log.error("grabarListaAdjunto 08 - Actualizando la version de los archivos catalogos");
                        return cmisService.updateFileAndMove(listAdjuntoNew, folderId);
                    });
            if (Optional.ofNullable(listAdjuntoMove.get()).isPresent()) {
                for (CmisFile cmisFile : listAdjuntoMove.get()) {
                    FacDocumentoAdjunto documento = new FacDocumentoAdjunto();
                    documento.setCarpetaId(folderId);
                    documento.setArchivoId(cmisFile.getId());
                    documento.setArchivoNombre(cmisFile.getName());
                    documento.setRutaCatalogo(cmisFile.getUrl());
                    documento.setArchivoTipo(cmisFile.getType());
                    documento.setSize(cmisFile.getSize());
                    documento.setTipoAdjunto(tipoAdjunto);
                    documento.setFacFactura(facFactura);
                    documento = this.facDocumentoAdjuntoDeltaRepository.save(documento);
                    beanListaAdjuntoRpta.add(documento);
                }
            }
        }
        return beanListaAdjuntoRpta;
    }


    public PageResponse<FacFactura> findCondicionProveedorPaginated(
            FacFacturaResponse req,
            PageRequest pageRequest) throws Exception {
        UserSession userSession = this.systemLoggedUser.getUserSession();

        FacFactura facFactura = req.getBean();
        MtrProveedor mtrProveedor = this.mtrProveedorDeltaRepository.findByCodigoIdp(userSession.getId());
        if (!Optional.ofNullable(mtrProveedor).isPresent()) {
            throw new Exception("El Proveedor con c√≥digo IDP: " + userSession.getId() + " no se encuentra registrado en la Tabla MtrProveedor o no esta asociado al IDP en dicha Tabla");
        }
        MtrProveedor mtrProveedorBuscar = new MtrProveedor();
        mtrProveedorBuscar.setId(mtrProveedor.getId());
        facFactura.setMtrProveedor(mtrProveedorBuscar);
        req.setBean(facFactura);
        PageResponse<FacFactura> pageResponse = this.findCondicionPaginated(req, pageRequest);
        return pageResponse;
    }

    public List<FacFactura> findProveedor(FacFactura bean) throws Exception {
        UserSession userSession = this.systemLoggedUser.getUserSession();
        MtrProveedor mtrProveedor = this.mtrProveedorDeltaRepository.findByCodigoIdp(userSession.getId());
        if (!Optional.ofNullable(mtrProveedor).isPresent()) {
            throw new Exception("El Proveedor con c√≥digo IDP: " + userSession.getId() + " no se encuentra registrado en la Tabla MtrProveedor o no esta asociado al IDP en dicha Tabla");
        }
        bean.setMtrProveedor(mtrProveedor);
        return this.find(bean);
    }

    public List<FacFactura> findCondicionProveedor(FacFacturaResponse bean) throws Exception {
        UserSession userSession = this.systemLoggedUser.getUserSession();
        MtrProveedor mtrProveedor = this.mtrProveedorDeltaRepository.findByCodigoIdp(userSession.getId());
        if (!Optional.ofNullable(mtrProveedor).isPresent()) {
            throw new Exception("El Proveedor con c√≥digo IDP: " + userSession.getId() + " no se encuentra registrado en la Tabla MtrProveedor o no esta asociado al IDP en dicha Tabla");
        }
        FacFactura facFactura = bean.getBean();
        MtrProveedor mtrProveedorBuscar = new MtrProveedor();
        mtrProveedorBuscar.setId(mtrProveedor.getId());
        facFactura.setMtrProveedor(mtrProveedorBuscar);
        bean.setBean(facFactura);
        List<FacFactura> facFacturaList = this.findCondicionProveedor(bean);
        return facFacturaList;
    }




    public FacDocumentoAdjunto facturaAdjunto(MultipartFile file, String tipo) throws Exception {
        log.error("facturaAdjunto 00 file: " + file.toString());
        UserSession user = this.systemLoggedUser.getUserSession();
        Long current = System.currentTimeMillis();
        int valorCurrent = Math.abs(current.intValue());

        MtrProveedor mtrProveedor = this.mtrProveedorDeltaRepository.findByCodigoIdp(user.getId());
        if (!Optional.ofNullable(mtrProveedor).isPresent()) {
            throw new Exception("No se encontr√≥ Proveedor con C√≥digo IDP: " + user.getId());
        }

        log.info("RUC proveedor : " + mtrProveedor.getRuc());
        String TEMP_DIRECTORY = "COGA-TEMP-" + mtrProveedor.getRuc();
        String folderId = cmisService.createFolder(TEMP_DIRECTORY);
        log.debug("facturaAdjunto 01 ---> folderId  [" + folderId + " ]");

        CmisFile cmisFile = cmisService.createOrReplaceDocumento(folderId, file);

        log.error("facturaAdjunto 02 ---> cmisFile  [" + cmisFile.toString() + " ]");
        FacDocumentoAdjunto facDocumentoAdjunto = new FacDocumentoAdjunto();
        facDocumentoAdjunto.setId(valorCurrent);
        facDocumentoAdjunto.setCarpetaId(folderId);
        facDocumentoAdjunto.setArchivoId(cmisFile.getId());
        facDocumentoAdjunto.setArchivoNombre(cmisFile.getName());
        facDocumentoAdjunto.setRutaCatalogo(cmisFile.getUrl());
        facDocumentoAdjunto.setArchivoTipo(cmisFile.getType());
        facDocumentoAdjunto.setSize(cmisFile.getSize());
        facDocumentoAdjunto.setTipoAdjunto(tipo);

        log.error("facturaAdjunto 03 [" + file.getName() + " , " +
                file.getSize() + " temp directory " + TEMP_DIRECTORY + " ]");
        return facDocumentoAdjunto;
    }



    public List deleteAllFilesCMIS() {
        List<CmisFile> adjuntosDeleteCmisFile = new ArrayList<CmisFile>();
        /*UserSession user = this.systemLoggedUser.getUserSession();
        String newFolder = "COGA-TEMP-" + user.getRuc()+"-"+createTempDate();
        cmisService.getListFileByFolderId("newFolder").stream().forEach(e -> {
            cmisService.deleteFile(e.getId());
            adjuntosDeleteCmisFile.add(e);
        });*/
        return adjuntosDeleteCmisFile;
    }

    public List deleteOneFile(String idFile) throws Exception {
        List<String> deleteCmisFile = new ArrayList<String>();
        cmisService.deleteFile(idFile);
        deleteCmisFile.add("Delete file id " + idFile);
        return deleteCmisFile;
    }


    /**
     * Listar document of Factura
     */
    public List listaAdjuntos(Integer FacturaID) {
        FacDocumentoAdjunto facDocumentoAdjunto = new FacDocumentoAdjunto();
        facDocumentoAdjunto.setFacFactura(this.facFacturaRepository.getOne(FacturaID));
        return find(facDocumentoAdjunto.getFacFactura());
    }

    private String createTempDate() {
        SimpleDateFormat formatterDate = new SimpleDateFormat("HH:mm:ss", Locale.ENGLISH);
        return formatterDate.format(new Date());
    }

    /***********************/
    /* Metodos de Busqueda */

    /***********************/

    protected Sort setFindAll(Sort sort) {
        sort = Sort.by(
                new Sort.Order(Sort.Direction.DESC, "mtrProveedor.razonSocial"),
                new Sort.Order(Sort.Direction.DESC, "fechaFactura"),
                new Sort.Order(Sort.Direction.ASC, "serieFactura"),
                new Sort.Order(Sort.Direction.ASC, "numeroFactura")
        );
        return sort;
    }

    protected Sort setFind(FacFactura req, ExampleMatcher matcher, Example<FacFactura> example, Sort sort) {
        sort = Sort.by(
                new Sort.Order(Sort.Direction.DESC, "mtrProveedor.razonSocial"),
                new Sort.Order(Sort.Direction.DESC, "fechaFactura"),
                new Sort.Order(Sort.Direction.ASC, "serieFactura"),
                new Sort.Order(Sort.Direction.ASC, "numeroFactura")
        );
        return sort;
    }

    protected void setFindPaginated(PageRequestByExample<FacFactura> req, ExampleMatcher matcher, Example<FacFactura> example) {
        return;
    }


    protected List<Predicate> setAdicionalDeltaPredicate(
            List<Predicate> predicates,
            FacFacturaResponse bean,
            CriteriaBuilder cb,
            CriteriaQuery<FacFactura> query,
            Root<FacFactura> root) throws Exception {
        FacFactura entity = bean.getBean();
        if (Optional.ofNullable(entity.getMtrProveedor()).isPresent()) {
            Join<FacFactura, MtrProveedor> fromMtrProveedor = root.join("mtrProveedor", JoinType.INNER);
            if (Optional.ofNullable(entity.getMtrProveedor().getId()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrProveedor.get("id"), entity.getMtrProveedor().getId());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getMtrProveedor().getRuc()).isPresent()) {
                Predicate thirdCondition = cb.equal(cb.upper(fromMtrProveedor.get("ruc")), entity.getMtrProveedor().getRuc());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getMtrProveedor().getRazonSocial()).isPresent()) {
                Predicate thirdCondition = cb.like(cb.upper(fromMtrProveedor.get("razonSocial")), "%" + entity.getMtrProveedor().getRazonSocial().toUpperCase().trim() + "%");
                predicates.add(thirdCondition);
            }
        }
        if (Optional.ofNullable(entity.getMtrEstado()).isPresent()) {
            Join<FacFactura, MtrEstado> fromMtrEstado = root.join("mtrEstado", JoinType.INNER);
            if (Optional.ofNullable(entity.getMtrEstado().getId()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrEstado.get("id"), entity.getMtrEstado().getId());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getMtrEstado().getCodigoAgrupado()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrEstado.get("codigoAgrupado"), entity.getMtrEstado().getCodigoAgrupado());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getMtrEstado().getCodigoEstado()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrEstado.get("codigoEstado"), entity.getMtrEstado().getCodigoEstado());
                predicates.add(thirdCondition);
            }
        }
        if (Optional.ofNullable(entity.getMtrMoneda()).isPresent()) {
            Join<CerCertificado, MtrMoneda> fromMtr = root.join("mtrMoneda", JoinType.INNER);
            if (Optional.ofNullable(entity.getMtrMoneda().getId()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtr.get("id"), entity.getMtrMoneda().getId());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getMtrMoneda().getSigla()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtr.get("sigla"), entity.getMtrMoneda().getSigla());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getMtrMoneda().getMonedaDescrip()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtr.get("monedaDescrip"), entity.getMtrMoneda().getMonedaDescrip());
                predicates.add(thirdCondition);
            }
        }
        if (Optional.ofNullable(entity.getFacContacto()).isPresent()) {
            Join<FacFactura, FacContacto> fromFacContacto = root.join("facContacto", JoinType.INNER);
            if (Optional.ofNullable(entity.getFacContacto().getId()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromFacContacto.get("id"), entity.getFacContacto().getId());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getFacContacto().getEmail()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromFacContacto.get("email"), entity.getFacContacto().getEmail());
                predicates.add(thirdCondition);
            }
        }
        if (Optional.ofNullable(entity.getMtrDetraccion()).isPresent()) {
            Join<FacFactura, FacContacto> fromMtrDetraccion = root.join("mtrDetraccion", JoinType.LEFT);
            if (Optional.ofNullable(entity.getMtrDetraccion().getId()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrDetraccion.get("id"), entity.getMtrDetraccion().getId());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getMtrDetraccion().getCodigo()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrDetraccion.get("codigo"), entity.getMtrDetraccion().getCodigo());
                predicates.add(thirdCondition);
            }
        }
        if (Optional.ofNullable(entity.getMtrSociedad()).isPresent()) {
            Join<FacFactura, MtrSociedad> fromMtrSociedad = root.join("mtrSociedad", JoinType.LEFT);
            if (Optional.ofNullable(entity.getMtrSociedad().getId()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrSociedad.get("id"), entity.getMtrSociedad().getId());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getMtrSociedad().getDescripcion()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrSociedad.get("descripcion"), entity.getMtrSociedad().getDescripcion());
                predicates.add(thirdCondition);
            }
        }

        if (Optional.ofNullable(entity.getFechaEmisionIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaEmisionFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaEmisionIni());
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaEmisionFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);

            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaEmision"), fechaDesde));
            predicates.add(cb.lessThan(root.<Date>get("fechaEmision"), fechaHasta));
        }
        if (Optional.ofNullable(entity.getFechaEmisionIni()).isPresent() &&
                !Optional.ofNullable(entity.getFechaEmisionFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaEmisionIni());
            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaEmision"), fechaDesde));
        }
        if (!Optional.ofNullable(entity.getFechaEmisionIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaEmisionFin()).isPresent()) {
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaEmisionFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);
            predicates.add(cb.lessThan(root.<Date>get("fechaEmision"), fechaHasta));
        }

        if (Optional.ofNullable(entity.getFechaEmisionIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaEmisionFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaEmisionIni());
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaEmisionFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);

            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaEmision"), fechaDesde));
            predicates.add(cb.lessThan(root.<Date>get("fechaEmision"), fechaHasta));
        }
        if (Optional.ofNullable(entity.getFechaEmisionIni()).isPresent() &&
                !Optional.ofNullable(entity.getFechaEmisionFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaEmisionIni());
            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaEmision"), fechaDesde));
        }
        if (!Optional.ofNullable(entity.getFechaEmisionIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaEmisionFin()).isPresent()) {
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaEmisionFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);
            predicates.add(cb.lessThan(root.<Date>get("fechaEmision"), fechaHasta));
        }


        if (Optional.ofNullable(entity.getFechaPagoIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaPagoFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaPagoIni());
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaPagoFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);

            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaPago"), fechaDesde));
            predicates.add(cb.lessThan(root.<Date>get("fechaPago"), fechaHasta));
        }
        if (Optional.ofNullable(entity.getFechaPagoIni()).isPresent() &&
                !Optional.ofNullable(entity.getFechaPagoFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaPagoIni());
            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaPago"), fechaDesde));
        }
        if (!Optional.ofNullable(entity.getFechaPagoIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaPagoFin()).isPresent()) {
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaPagoFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);
            predicates.add(cb.lessThan(root.<Date>get("fechaPago"), fechaHasta));
        }


        if (Optional.ofNullable(entity.getFechaEstimadaPagoIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaEstimadaPagoFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaEstimadaPagoIni());
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaEstimadaPagoFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);

            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaEstimadaPago"), fechaDesde));
            predicates.add(cb.lessThan(root.<Date>get("fechaEstimadaPago"), fechaHasta));
        }
        if (Optional.ofNullable(entity.getFechaEstimadaPagoIni()).isPresent() &&
                !Optional.ofNullable(entity.getFechaEstimadaPagoFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaEstimadaPagoIni());
            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaEstimadaPago"), fechaDesde));
        }
        if (!Optional.ofNullable(entity.getFechaEstimadaPagoIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaEstimadaPagoFin()).isPresent()) {
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaEstimadaPagoFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);
            predicates.add(cb.lessThan(root.<Date>get("fechaEstimadaPago"), fechaHasta));
        }


        if (Optional.ofNullable(entity.getFechaCreacionIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaCreacionFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaCreacionIni());
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaCreacionFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);

            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaCreacion"), fechaDesde));
            predicates.add(cb.lessThan(root.<Date>get("fechaCreacion"), fechaHasta));
        }
        if (Optional.ofNullable(entity.getFechaCreacionIni()).isPresent() &&
                !Optional.ofNullable(entity.getFechaCreacionFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaCreacionIni());
            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaCreacion"), fechaDesde));
        }
        if (!Optional.ofNullable(entity.getFechaCreacionIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaCreacionFin()).isPresent()) {
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaCreacionFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);
            predicates.add(cb.lessThan(root.<Date>get("fechaCreacion"), fechaHasta));
        }


        if (Optional.ofNullable(entity.getFechaAprobacionIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaAprobacionFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaAprobacionIni());
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaAprobacionFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);

            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaAprobacion"), fechaDesde));
            predicates.add(cb.lessThan(root.<Date>get("fechaAprobacion"), fechaHasta));
        }
        if (Optional.ofNullable(entity.getFechaAprobacionIni()).isPresent() &&
                !Optional.ofNullable(entity.getFechaAprobacionFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaAprobacionIni());
            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaAprobacion"), fechaDesde));
        }
        if (!Optional.ofNullable(entity.getFechaAprobacionIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaAprobacionFin()).isPresent()) {
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaAprobacionFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);
            predicates.add(cb.lessThan(root.<Date>get("fechaAprobacion"), fechaHasta));
        }

        List<Order> orderList = new ArrayList<Order>();
        orderList.add(cb.desc(root.get("serieFactura")));
        orderList.add(cb.desc(root.get("numeroFactura")));
        query.orderBy(orderList);
        return predicates;
    }

    protected Root<FacFactura> setAdicionalDeltaTotalPredicate(
            FacFacturaResponse bean,
            Root<FacFactura> countRoot) throws Exception {
        FacFactura entity = bean.getBean();
        if (Optional.ofNullable(entity.getMtrProveedor()).isPresent()) {
            Join<FacFactura, MtrProveedor> fromMtrProveedor = countRoot.join("mtrProveedor", JoinType.INNER);
        }
        if (Optional.ofNullable(entity.getMtrEstado()).isPresent()) {
            Join<FacFactura, MtrEstado> fromMtrEstado = countRoot.join("mtrEstado", JoinType.INNER);
        }
        if (Optional.ofNullable(entity.getMtrMoneda()).isPresent()) {
            Join<FacFactura, MtrMoneda> fromMtrMoneda = countRoot.join("mtrMoneda", JoinType.INNER);
        }
        if (Optional.ofNullable(entity.getFacContacto()).isPresent()) {
            Join<FacFactura, FacContacto> fromFacContacto = countRoot.join("facContacto", JoinType.INNER);
        }
        if (Optional.ofNullable(entity.getMtrDetraccion()).isPresent()) {
            Join<FacFactura, MtrDetraccion> fromMtrDetraccion = countRoot.join("mtrDetraccion", JoinType.LEFT);
        }
        if (Optional.ofNullable(entity.getMtrSociedad()).isPresent()) {
            Join<FacFactura, MtrSociedad> fromMtrSociedad = countRoot.join("mtrSociedad", JoinType.LEFT);
        }
        return countRoot;
    }

    /****************/
    /* METODOS CRUD */

    /****************/

    protected String setValidacionesPrevias(FacFactura bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected FacFactura setCreate(FacFactura bean) throws Exception {
        return bean;
    }

    protected void setSave(FacFactura dto) throws Exception {
        return;
    }

    protected void setDelete(Integer id) throws Exception {

    }

    protected void setDeleteAll() throws Exception {

    }

    /************************/
    /* METODOS CRUD Masivos */

    /************************/

    protected FacFactura setUploadExcel(Cell currentCell, FacFactura facFactura, int contador) throws Exception {
        facFactura = super.setUploadExcel(currentCell, facFactura, contador);
        return facFactura;
    }

    protected String setSaveMasivo(FacFactura dto) throws Exception {
        return "";
    }

    protected List<FacFactura> setBeforeDeleteMasivo(List<FacFactura> listaDto) throws Exception {
        return listaDto;
    }

    protected void setAfterDeleteMasivo() throws Exception {
        return;
    }

    /*****************************/
    /* Metodos que generan Excel */

    /*****************************/

    protected void setDownloadExcelItem(FacFactura bean, HSSFRow dataRow) {

    }

    protected void setDownloadExcel(HSSFSheet sheet) {

    }

    /*****************/
    /* Otros Metodos */

    /*****************/

    protected String setGraphDescripcionByMtrEstado(MtrEstado mtrEstado) {
        return mtrEstado.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrEstado() {
        return "MtrEstado";
    }

    protected String setGraphBarChartTituloByMtrEstado() {
        return "MtrEstado";
    }

    protected String setGraphDescripcionByMtrMoneda(MtrMoneda mtrMoneda) {
        return mtrMoneda.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrMoneda() {
        return "MtrMoneda";
    }

    protected String setGraphBarChartTituloByMtrMoneda() {
        return "MtrMoneda";
    }

    protected String setGraphDescripcionByMtrDetraccion(MtrDetraccion mtrDetraccion) {
        return mtrDetraccion.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrDetraccion() {
        return "MtrDetraccion";
    }

    protected String setGraphBarChartTituloByMtrDetraccion() {
        return "MtrDetraccion";
    }

    protected String setGraphDescripcionByMtrProveedor(MtrProveedor cerProveedor) {
        return cerProveedor.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrProveedor() {
        return "MtrProveedor";
    }

    protected String setGraphBarChartTituloByMtrProveedor() {
        return "MtrProveedor";
    }

    protected String setGraphDescripcionByMtrSector(MtrSector mtrSector) {
        return mtrSector.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrSector() {
        return "MtrSector";
    }

    protected String setGraphBarChartTituloByMtrSector() {
        return "MtrSector";
    }

}
